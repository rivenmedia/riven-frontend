/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** create an auth token. The token has one month validation length. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        apikey: string;
                        pin?: string;
                    };
                };
            };
            responses: {
                /** @description response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data?: {
                                token?: string;
                            };
                            status?: string;
                        };
                    };
                };
                /** @description invalid credentials */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/artwork/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns a single artwork base record. */
        get: operations["getArtworkBase"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/artwork/{id}/extended": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns a single artwork extended record. */
        get: operations["getArtworkExtended"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/artwork/statuses": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns list of artwork status records. */
        get: operations["getAllArtworkStatuses"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/artwork/types": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns a list of artworkType records */
        get: operations["getAllArtworkTypes"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/awards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns a list of award base records */
        get: operations["getAllAwards"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/awards/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns a single award base record */
        get: operations["getAward"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/awards/{id}/extended": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns a single award extended record */
        get: operations["getAwardExtended"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/awards/categories/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns a single award category base record */
        get: operations["getAwardCategory"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/awards/categories/{id}/extended": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns a single award category extended record */
        get: operations["getAwardCategoryExtended"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/characters/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns character base record */
        get: operations["getCharacterBase"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/companies": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description returns a paginated list of company records */
        get: operations["getAllCompanies"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/companies/types": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description returns all company type records */
        get: operations["getCompanyTypes"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/companies/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description returns a company record */
        get: operations["getCompany"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/content/ratings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description returns list content rating records */
        get: operations["getAllContentRatings"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/countries": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description returns list of country records */
        get: operations["getAllCountries"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/entities": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description returns the active entity types */
        get: operations["getEntityTypes"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/episodes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns a list of episodes base records with the basic attributes.<br> Note that all episodes are returned, even those that may not be included in a series' default season order. */
        get: operations["getAllEpisodes"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/episodes/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns episode base record */
        get: operations["getEpisodeBase"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/episodes/{id}/extended": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns episode extended record */
        get: operations["getEpisodeExtended"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/episodes/{id}/translations/{language}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns episode translation record */
        get: operations["getEpisodeTranslation"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/genders": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description returns list of gender records */
        get: operations["getAllGenders"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/genres": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description returns list of genre records */
        get: operations["getAllGenres"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/genres/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns genre record */
        get: operations["getGenreBase"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/inspiration/types": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description returns list of inspiration types records */
        get: operations["getAllInspirationTypes"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/languages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description returns list of language records */
        get: operations["getAllLanguages"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lists": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description returns list of list base records */
        get: operations["getAllLists"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lists/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description returns an list base record */
        get: operations["getList"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lists/slug/{slug}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description returns an list base record search by slug */
        get: operations["getListBySlug"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lists/{id}/extended": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description returns a list extended record */
        get: operations["getListExtended"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lists/{id}/translations/{language}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns list translation record */
        get: operations["getListTranslation"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/movies": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description returns list of movie base records */
        get: operations["getAllMovie"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/movies/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns movie base record */
        get: operations["getMovieBase"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/movies/{id}/extended": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns movie extended record */
        get: operations["getMovieExtended"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/movies/filter": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Search movies based on filter parameters */
        get: operations["getMoviesFilter"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/movies/slug/{slug}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns movie base record search by slug */
        get: operations["getMovieBaseBySlug"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/movies/{id}/translations/{language}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns movie translation record */
        get: operations["getMovieTranslation"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/movies/statuses": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description returns list of status records */
        get: operations["getAllMovieStatuses"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/people": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns a list of people base records with the basic attributes. */
        get: operations["getAllPeople"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/people/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns people base record */
        get: operations["getPeopleBase"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/people/{id}/extended": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns people extended record */
        get: operations["getPeopleExtended"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/people/{id}/translations/{language}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns people translation record */
        get: operations["getPeopleTranslation"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/people/types": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description returns list of peopleType records */
        get: operations["getAllPeopleTypes"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Our search index includes series, movies, people, and companies. Search is limited to 5k results max. */
        get: operations["getSearchResults"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/search/remoteid/{remoteId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Search a series, movie, people, episode, company or season by specific remote id and returns a base record for that entity. */
        get: operations["getSearchResultsByRemoteId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/seasons": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description returns list of seasons base records */
        get: operations["getAllSeasons"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/seasons/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns season base record */
        get: operations["getSeasonBase"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/seasons/{id}/extended": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns season extended record */
        get: operations["getSeasonExtended"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/seasons/types": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns season type records */
        get: operations["getSeasonTypes"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/seasons/{id}/translations/{language}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns season translation record */
        get: operations["getSeasonTranslation"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/series": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description returns list of series base records */
        get: operations["getAllSeries"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/series/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns series base record */
        get: operations["getSeriesBase"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/series/{id}/artworks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns series artworks base on language and type. <br> Note&#58; Artwork type is an id that can be found using **\/artwork/types** endpoint. */
        get: operations["getSeriesArtworks"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/series/{id}/nextAired": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns series base record including the nextAired field. <br> Note&#58; nextAired was included in the base record endpoint but that field will deprecated in the future so developers should use the nextAired endpoint. */
        get: operations["getSeriesNextAired"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/series/{id}/extended": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns series extended record */
        get: operations["getSeriesExtended"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/series/{id}/episodes/{season-type}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns series episodes from the specified season type, default returns the episodes in the series default season type */
        get: operations["getSeriesEpisodes"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/series/{id}/episodes/{season-type}/{lang}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns series base record with episodes from the specified season type and language. Default returns the episodes in the series default season type. */
        get: operations["getSeriesSeasonEpisodesTranslated"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/series/filter": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Search series based on filter parameters */
        get: operations["getSeriesFilter"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/series/slug/{slug}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns series base record searched by slug */
        get: operations["getSeriesBaseBySlug"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/series/{id}/translations/{language}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns series translation record */
        get: operations["getSeriesTranslation"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/series/statuses": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description returns list of status records */
        get: operations["getAllSeriesStatuses"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sources/types": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description returns list of sourceType records */
        get: operations["getAllSourceTypes"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/updates": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns updated entities.  methodInt indicates a created record (1), an updated record (2), or a deleted record (3).  If a record is deleted because it was a duplicate of another record, the target record's information is provided in mergeToType and mergeToId. */
        get: operations["updates"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description returns user info */
        get: operations["getUserInfo"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description returns user info by user id */
        get: operations["getUserInfoById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/favorites": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description returns user favorites */
        get: operations["getUserFavorites"];
        put?: never;
        /** @description creates a new user favorite */
        post: operations["createUserFavorites"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description An alias model, which can be associated with a series, season, movie, person, or list. */
        Alias: {
            /** @description A 3-4 character string indicating the language of the alias, as defined in Language. */
            language?: string;
            /** @description A string containing the alias itself. */
            name?: string;
        };
        /** @description base artwork record */
        ArtworkBaseRecord: {
            /** Format: int64 */
            height?: number;
            id?: number;
            image?: string;
            includesText?: boolean;
            language?: string;
            score?: number;
            thumbnail?: string;
            /**
             * Format: int64
             * @description The artwork type corresponds to the ids from the /artwork/types endpoint.
             */
            type?: number;
            /** Format: int64 */
            width?: number;
        };
        /** @description extended artwork record */
        ArtworkExtendedRecord: {
            episodeId?: number;
            /** Format: int64 */
            height?: number;
            /** Format: int64 */
            id?: number;
            image?: string;
            includesText?: boolean;
            language?: string;
            movieId?: number;
            networkId?: number;
            peopleId?: number;
            score?: number;
            seasonId?: number;
            seriesId?: number;
            seriesPeopleId?: number;
            status?: components["schemas"]["ArtworkStatus"];
            tagOptions?: components["schemas"]["TagOption"][];
            thumbnail?: string;
            /** Format: int64 */
            thumbnailHeight?: number;
            /** Format: int64 */
            thumbnailWidth?: number;
            /**
             * Format: int64
             * @description The artwork type corresponds to the ids from the /artwork/types endpoint.
             */
            type?: number;
            /** Format: int64 */
            updatedAt?: number;
            /** Format: int64 */
            width?: number;
        };
        /** @description artwork status record */
        ArtworkStatus: {
            /** Format: int64 */
            id?: number;
            name?: string;
        };
        /** @description artwork type record */
        ArtworkType: {
            /** Format: int64 */
            height?: number;
            /** Format: int64 */
            id?: number;
            imageFormat?: string;
            name?: string;
            recordType?: string;
            slug?: string;
            /** Format: int64 */
            thumbHeight?: number;
            /** Format: int64 */
            thumbWidth?: number;
            /** Format: int64 */
            width?: number;
        };
        /** @description base award record */
        AwardBaseRecord: {
            id?: number;
            name?: string;
        };
        /** @description base award category record */
        AwardCategoryBaseRecord: {
            allowCoNominees?: boolean;
            award?: components["schemas"]["AwardBaseRecord"];
            forMovies?: boolean;
            forSeries?: boolean;
            /** Format: int64 */
            id?: number;
            name?: string;
        };
        /** @description extended award category record */
        AwardCategoryExtendedRecord: {
            allowCoNominees?: boolean;
            award?: components["schemas"]["AwardBaseRecord"];
            forMovies?: boolean;
            forSeries?: boolean;
            /** Format: int64 */
            id?: number;
            name?: string;
            nominees?: components["schemas"]["AwardNomineeBaseRecord"][];
        };
        /** @description extended award record */
        AwardExtendedRecord: {
            categories?: components["schemas"]["AwardCategoryBaseRecord"][];
            id?: number;
            name?: string;
            /** Format: int64 */
            score?: number;
        };
        /** @description base award nominee record */
        AwardNomineeBaseRecord: {
            character?: components["schemas"]["Character"];
            details?: string;
            episode?: components["schemas"]["EpisodeBaseRecord"];
            /** Format: int64 */
            id?: number;
            isWinner?: boolean;
            movie?: components["schemas"]["MovieBaseRecord"];
            series?: components["schemas"]["SeriesBaseRecord"];
            year?: string;
            category?: string;
            name?: string;
        };
        /** @description biography record */
        Biography: {
            biography?: string;
            language?: string;
        };
        /** @description character record */
        Character: {
            aliases?: components["schemas"]["Alias"][];
            episode?: components["schemas"]["RecordInfo"];
            episodeId?: number | null;
            /** Format: int64 */
            id?: number;
            image?: string;
            isFeatured?: boolean;
            movieId?: number | null;
            movie?: components["schemas"]["RecordInfo"];
            name?: string;
            nameTranslations?: string[];
            overviewTranslations?: string[];
            peopleId?: number;
            personImgURL?: string;
            peopleType?: string;
            seriesId?: number | null;
            series?: components["schemas"]["RecordInfo"];
            /** Format: int64 */
            sort?: number;
            tagOptions?: components["schemas"]["TagOption"][];
            /** Format: int64 */
            type?: number;
            url?: string;
            personName?: string;
        };
        /** @description A company record */
        Company: {
            activeDate?: string;
            aliases?: components["schemas"]["Alias"][];
            country?: string;
            /** Format: int64 */
            id?: number;
            inactiveDate?: string;
            name?: string;
            nameTranslations?: string[];
            overviewTranslations?: string[];
            /** Format: int64 */
            primaryCompanyType?: number | null;
            slug?: string;
            parentCompany?: components["schemas"]["ParentCompany"];
            tagOptions?: components["schemas"]["TagOption"][];
        };
        /** @description A parent company record */
        ParentCompany: {
            id?: number | null;
            name?: string;
            relation?: components["schemas"]["CompanyRelationShip"];
        };
        /** @description A company relationship */
        CompanyRelationShip: {
            id?: number | null;
            typeName?: string;
        };
        /** @description A company type record */
        CompanyType: {
            companyTypeId?: number;
            companyTypeName?: string;
        };
        /** @description content rating record */
        ContentRating: {
            /** Format: int64 */
            id?: number;
            name?: string;
            description?: string;
            country?: string;
            contentType?: string;
            order?: number;
            fullName?: string;
        };
        /** @description country record */
        Country: {
            id?: string;
            name?: string;
            shortCode?: string;
        };
        /** @description Entity record */
        Entity: {
            movieId?: number;
            /** Format: int64 */
            order?: number;
            seriesId?: number;
        };
        /** @description Entity Type record */
        EntityType: {
            id?: number;
            name?: string;
            hasSpecials?: boolean;
        };
        /** @description entity update record */
        EntityUpdate: {
            entityType?: string;
            methodInt?: number;
            method?: string;
            extraInfo?: string;
            userId?: number;
            recordType?: string;
            /** Format: int64 */
            recordId?: number;
            /** Format: int64 */
            timeStamp?: number;
            /**
             * Format: int64
             * @description Only present for episodes records
             */
            seriesId?: number;
            /** Format: int64 */
            mergeToId?: number;
            mergeToEntityType?: string;
        };
        /** @description base episode record */
        EpisodeBaseRecord: {
            absoluteNumber?: number;
            aired?: string;
            airsAfterSeason?: number;
            airsBeforeEpisode?: number;
            airsBeforeSeason?: number;
            /** @description season, midseason, or series */
            finaleType?: string;
            /** Format: int64 */
            id?: number;
            image?: string;
            imageType?: number | null;
            /** Format: int64 */
            isMovie?: number;
            lastUpdated?: string;
            linkedMovie?: number;
            name?: string;
            nameTranslations?: string[];
            number?: number;
            overview?: string;
            overviewTranslations?: string[];
            runtime?: number | null;
            seasonNumber?: number;
            seasons?: components["schemas"]["SeasonBaseRecord"][];
            /** Format: int64 */
            seriesId?: number;
            seasonName?: string;
            year?: string;
        };
        /** @description extended episode record */
        EpisodeExtendedRecord: {
            aired?: string;
            airsAfterSeason?: number;
            airsBeforeEpisode?: number;
            airsBeforeSeason?: number;
            awards?: components["schemas"]["AwardBaseRecord"][];
            characters?: components["schemas"]["Character"][];
            companies?: components["schemas"]["Company"][];
            contentRatings?: components["schemas"]["ContentRating"][];
            /** @description season, midseason, or series */
            finaleType?: string;
            /** Format: int64 */
            id?: number;
            image?: string;
            imageType?: number | null;
            /** Format: int64 */
            isMovie?: number;
            lastUpdated?: string;
            linkedMovie?: number;
            name?: string;
            nameTranslations?: string[];
            networks?: components["schemas"]["Company"][];
            nominations?: components["schemas"]["AwardNomineeBaseRecord"][];
            number?: number;
            overview?: string;
            overviewTranslations?: string[];
            productionCode?: string;
            remoteIds?: components["schemas"]["RemoteID"][];
            runtime?: number | null;
            seasonNumber?: number;
            seasons?: components["schemas"]["SeasonBaseRecord"][];
            /** Format: int64 */
            seriesId?: number;
            studios?: components["schemas"]["Company"][];
            tagOptions?: components["schemas"]["TagOption"][];
            trailers?: components["schemas"]["Trailer"][];
            translations?: components["schemas"]["TranslationExtended"];
            year?: string;
        };
        /** @description User favorites record */
        Favorites: {
            series?: number[];
            movies?: number[];
            episodes?: number[];
            artwork?: number[];
            people?: number[];
            lists?: number[];
        };
        /** @description Favorites record */
        FavoriteRecord: {
            series?: number;
            movie?: number;
            episode?: number;
            artwork?: number;
            people?: number;
            list?: number;
        };
        /** @description gender record */
        Gender: {
            /** Format: int64 */
            id?: number;
            name?: string;
        };
        /** @description base genre record */
        GenreBaseRecord: {
            /** Format: int64 */
            id?: number;
            name?: string;
            slug?: string;
        };
        /** @description language record */
        Language: {
            id?: string;
            name?: string;
            nativeName?: string;
            shortCode?: string;
        };
        /** @description base list record */
        ListBaseRecord: {
            aliases?: components["schemas"]["Alias"][];
            /** Format: int64 */
            id?: number;
            image?: string;
            imageIsFallback?: boolean;
            isOfficial?: boolean;
            name?: string;
            nameTranslations?: string[];
            overview?: string;
            overviewTranslations?: string[];
            remoteIds?: components["schemas"]["RemoteID"][];
            tags?: components["schemas"]["TagOption"][];
            score?: number;
            url?: string;
        };
        /** @description extended list record */
        ListExtendedRecord: {
            aliases?: components["schemas"]["Alias"][];
            entities?: components["schemas"]["Entity"][];
            /** Format: int64 */
            id?: number;
            image?: string;
            imageIsFallback?: boolean;
            isOfficial?: boolean;
            name?: string;
            nameTranslations?: string[];
            overview?: string;
            overviewTranslations?: string[];
            /** Format: int64 */
            score?: number;
            url?: string;
        };
        /** @description base movie record */
        MovieBaseRecord: {
            aliases?: components["schemas"]["Alias"][];
            /** Format: int64 */
            id?: number;
            image?: string;
            lastUpdated?: string;
            name?: string;
            nameTranslations?: string[];
            overviewTranslations?: string[];
            /** Format: double */
            score?: number;
            slug?: string;
            status?: components["schemas"]["Status"];
            runtime?: number | null;
            year?: string;
        };
        /** @description extended movie record */
        MovieExtendedRecord: {
            aliases?: components["schemas"]["Alias"][];
            artworks?: components["schemas"]["ArtworkBaseRecord"][];
            audioLanguages?: string[];
            awards?: components["schemas"]["AwardBaseRecord"][];
            boxOffice?: string;
            boxOfficeUS?: string;
            budget?: string;
            characters?: components["schemas"]["Character"][];
            companies?: components["schemas"]["Companies"];
            contentRatings?: components["schemas"]["ContentRating"][];
            first_release?: components["schemas"]["Release"];
            genres?: components["schemas"]["GenreBaseRecord"][];
            /** Format: int64 */
            id?: number;
            image?: string;
            inspirations?: components["schemas"]["Inspiration"][];
            lastUpdated?: string;
            lists?: components["schemas"]["ListBaseRecord"][];
            name?: string;
            nameTranslations?: string[];
            originalCountry?: string;
            originalLanguage?: string;
            overviewTranslations?: string[];
            production_countries?: components["schemas"]["ProductionCountry"][];
            releases?: components["schemas"]["Release"][];
            remoteIds?: components["schemas"]["RemoteID"][];
            runtime?: number | null;
            /** Format: double */
            score?: number;
            slug?: string;
            spoken_languages?: string[];
            status?: components["schemas"]["Status"];
            studios?: components["schemas"]["StudioBaseRecord"][];
            subtitleLanguages?: string[];
            tagOptions?: components["schemas"]["TagOption"][];
            trailers?: components["schemas"]["Trailer"][];
            translations?: components["schemas"]["TranslationExtended"];
            year?: string;
        };
        /** @description base people record */
        PeopleBaseRecord: {
            aliases?: components["schemas"]["Alias"][];
            /** Format: int64 */
            id?: number;
            image?: string;
            lastUpdated?: string;
            name?: string;
            nameTranslations?: string[];
            overviewTranslations?: string[];
            /** Format: int64 */
            score?: number;
        };
        /** @description extended people record */
        PeopleExtendedRecord: {
            aliases?: components["schemas"]["Alias"][];
            awards?: components["schemas"]["AwardBaseRecord"][];
            biographies?: components["schemas"]["Biography"][];
            birth?: string;
            birthPlace?: string;
            characters?: components["schemas"]["Character"][];
            death?: string;
            gender?: number;
            /** Format: int64 */
            id?: number;
            image?: string;
            lastUpdated?: string;
            name?: string;
            nameTranslations?: string[];
            overviewTranslations?: string[];
            races?: components["schemas"]["Race"][];
            remoteIds?: components["schemas"]["RemoteID"][];
            /** Format: int64 */
            score?: number;
            slug?: string;
            tagOptions?: components["schemas"]["TagOption"][];
            translations?: components["schemas"]["TranslationExtended"];
        };
        /** @description people type record */
        PeopleType: {
            /** Format: int64 */
            id?: number;
            name?: string;
        };
        /** @description race record */
        Race: Record<string, never>;
        /** @description base record info */
        RecordInfo: {
            image?: string;
            name?: string;
            year?: string;
        };
        /** @description release record */
        Release: {
            country?: string;
            date?: string;
            detail?: string;
        };
        /** @description remote id record */
        RemoteID: {
            id?: string;
            /** Format: int64 */
            type?: number;
            sourceName?: string;
        };
        /** @description search result */
        SearchResult: {
            aliases?: string[];
            companies?: string[];
            companyType?: string;
            country?: string;
            director?: string;
            first_air_time?: string;
            genres?: string[];
            id?: string;
            image_url?: string;
            name?: string;
            is_official?: boolean;
            name_translated?: string;
            network?: string;
            objectID?: string;
            officialList?: string;
            overview?: string;
            overviews?: components["schemas"]["TranslationSimple"];
            overview_translated?: string[];
            poster?: string;
            posters?: string[];
            primary_language?: string;
            remote_ids?: components["schemas"]["RemoteID"][];
            status?: string;
            slug?: string;
            studios?: string[];
            title?: string;
            thumbnail?: string;
            translations?: components["schemas"]["TranslationSimple"];
            translationsWithLang?: string[];
            tvdb_id?: string;
            type?: string;
            year?: string;
        };
        /** @description search by remote reuslt is a base record for a movie, series, people, season or company search result */
        SearchByRemoteIdResult: {
            series?: components["schemas"]["SeriesBaseRecord"];
            people?: components["schemas"]["PeopleBaseRecord"];
            movie?: components["schemas"]["MovieBaseRecord"];
            episode?: components["schemas"]["EpisodeBaseRecord"];
            company?: components["schemas"]["Company"];
        };
        /** @description season genre record */
        SeasonBaseRecord: {
            id?: number;
            image?: string;
            imageType?: number;
            lastUpdated?: string;
            name?: string;
            nameTranslations?: string[];
            /** Format: int64 */
            number?: number;
            overviewTranslations?: string[];
            companies?: components["schemas"]["Companies"];
            /** Format: int64 */
            seriesId?: number;
            type?: components["schemas"]["SeasonType"];
            year?: string;
        };
        /** @description extended season record */
        SeasonExtendedRecord: {
            artwork?: components["schemas"]["ArtworkBaseRecord"][];
            companies?: components["schemas"]["Companies"];
            episodes?: components["schemas"]["EpisodeBaseRecord"][];
            id?: number;
            image?: string;
            imageType?: number;
            lastUpdated?: string;
            name?: string;
            nameTranslations?: string[];
            /** Format: int64 */
            number?: number;
            overviewTranslations?: string[];
            /** Format: int64 */
            seriesId?: number;
            trailers?: components["schemas"]["Trailer"][];
            type?: components["schemas"]["SeasonType"];
            tagOptions?: components["schemas"]["TagOption"][];
            translations?: components["schemas"]["Translation"][];
            year?: string;
        };
        /** @description season type record */
        SeasonType: {
            alternateName?: string;
            /** Format: int64 */
            id?: number;
            name?: string;
            type?: string;
        };
        /** @description A series airs day record */
        SeriesAirsDays: {
            friday?: boolean;
            monday?: boolean;
            saturday?: boolean;
            sunday?: boolean;
            thursday?: boolean;
            tuesday?: boolean;
            wednesday?: boolean;
        };
        /** @description The base record for a series. All series airs time like firstAired, lastAired, nextAired, etc. are in US EST for US series, and for all non-US series, the time of the show’s country capital or most populous city. For streaming services, is the official release time. See https://support.thetvdb.com/kb/faq.php?id=29. */
        SeriesBaseRecord: {
            aliases?: components["schemas"]["Alias"][];
            averageRuntime?: number | null;
            country?: string;
            /** Format: int64 */
            defaultSeasonType?: number;
            episodes?: components["schemas"]["EpisodeBaseRecord"][];
            firstAired?: string;
            id?: number;
            image?: string;
            isOrderRandomized?: boolean;
            lastAired?: string;
            lastUpdated?: string;
            name?: string;
            nameTranslations?: string[];
            nextAired?: string;
            originalCountry?: string;
            originalLanguage?: string;
            overviewTranslations?: string[];
            /** Format: double */
            score?: number;
            slug?: string;
            status?: components["schemas"]["Status"];
            year?: string;
        };
        /** @description The extended record for a series. All series airs time like firstAired, lastAired, nextAired, etc. are in US EST for US series, and for all non-US series, the time of the show’s country capital or most populous city. For streaming services, is the official release time. See https://support.thetvdb.com/kb/faq.php?id=29. */
        SeriesExtendedRecord: {
            abbreviation?: string;
            airsDays?: components["schemas"]["SeriesAirsDays"];
            airsTime?: string;
            aliases?: components["schemas"]["Alias"][];
            artworks?: components["schemas"]["ArtworkExtendedRecord"][];
            averageRuntime?: number | null;
            characters?: components["schemas"]["Character"][];
            contentRatings?: components["schemas"]["ContentRating"][];
            country?: string;
            /** Format: int64 */
            defaultSeasonType?: number;
            episodes?: components["schemas"]["EpisodeBaseRecord"][];
            firstAired?: string;
            lists?: unknown;
            genres?: components["schemas"]["GenreBaseRecord"][];
            id?: number;
            image?: string;
            isOrderRandomized?: boolean;
            lastAired?: string;
            lastUpdated?: string;
            name?: string;
            nameTranslations?: string[];
            companies?: components["schemas"]["Company"][];
            nextAired?: string;
            originalCountry?: string;
            originalLanguage?: string;
            originalNetwork?: components["schemas"]["Company"];
            overview?: string;
            latestNetwork?: components["schemas"]["Company"];
            overviewTranslations?: string[];
            remoteIds?: components["schemas"]["RemoteID"][];
            /** Format: double */
            score?: number;
            seasons?: components["schemas"]["SeasonBaseRecord"][];
            seasonTypes?: components["schemas"]["SeasonType"][];
            slug?: string;
            status?: components["schemas"]["Status"];
            tags?: components["schemas"]["TagOption"][];
            trailers?: components["schemas"]["Trailer"][];
            translations?: components["schemas"]["TranslationExtended"];
            year?: string;
        };
        /** @description source type record */
        SourceType: {
            /** Format: int64 */
            id?: number;
            name?: string;
            postfix?: string;
            prefix?: string;
            slug?: string;
            /** Format: int64 */
            sort?: number;
        };
        /** @description status record */
        Status: {
            /** Format: int64 */
            id?: number | null;
            keepUpdated?: boolean;
            name?: string;
            recordType?: string;
        };
        /** @description studio record */
        StudioBaseRecord: {
            /** Format: int64 */
            id?: number;
            name?: string;
            parentStudio?: number;
        };
        /** @description tag record */
        Tag: {
            allowsMultiple?: boolean;
            helpText?: string;
            /** Format: int64 */
            id?: number;
            name?: string;
            options?: components["schemas"]["TagOption"][];
        };
        /** @description tag option record */
        TagOption: {
            helpText?: string;
            /** Format: int64 */
            id?: number;
            name?: string;
            /** Format: int64 */
            tag?: number;
            tagName?: string;
        };
        /** @description trailer record */
        Trailer: {
            /** Format: int64 */
            id?: number;
            language?: string;
            name?: string;
            url?: string;
            runtime?: number;
        };
        /** @description translation record */
        Translation: {
            aliases?: string[];
            isAlias?: boolean;
            isPrimary?: boolean;
            language?: string;
            name?: string;
            overview?: string;
            /** @description Only populated for movie translations.  We disallow taglines without a title. */
            tagline?: string;
        };
        /**
         * @description translation simple record
         * @example {
         *       "ara": "تدور قصة المسلسل حول...",
         *       "ces": "Během letu č. 815 společnosti Oceanic...",
         *       "deu": "Im Bruchteil einer Sekunde gerät das Leben..."
         *     }
         */
        TranslationSimple: {
            [key: string]: string;
        };
        /** @description translation extended record */
        TranslationExtended: {
            nameTranslations?: components["schemas"]["Translation"][];
            overviewTranslations?: components["schemas"]["Translation"][];
            alias?: string[];
        };
        /** @description a entity with selected tag option */
        TagOptionEntity: {
            name?: string;
            tagName?: string;
            tagId?: number;
        };
        /** @description User info record */
        UserInfo: {
            id?: number;
            language?: string;
            name?: string;
            type?: string;
        };
        /** @description Movie inspiration record */
        Inspiration: {
            /** Format: int64 */
            id?: number;
            type?: string;
            type_name?: string;
            url?: string;
        };
        /** @description Movie inspiration type record */
        InspirationType: {
            /** Format: int64 */
            id?: number;
            name?: string;
            description?: string;
            reference_name?: string;
            url?: string;
        };
        /** @description Production country record */
        ProductionCountry: {
            /** Format: int64 */
            id?: number;
            country?: string;
            name?: string;
        };
        /** @description Companies by type record */
        Companies: {
            studio?: components["schemas"]["Company"][];
            network?: components["schemas"]["Company"][];
            production?: components["schemas"]["Company"][];
            distributor?: components["schemas"]["Company"][];
            special_effects?: components["schemas"]["Company"][];
        };
        /** @description Links for next, previous and current record */
        Links: {
            prev?: string | null;
            self?: string | null;
            next?: string;
            total_items?: number;
            page_size?: number;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getArtworkBase: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["ArtworkBaseRecord"];
                        status?: string;
                    };
                };
            };
            /** @description Invalid artwork id */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Artwork not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getArtworkExtended: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["ArtworkExtendedRecord"];
                        status?: string;
                    };
                };
            };
            /** @description Invalid artwork id */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Artwork not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getAllArtworkStatuses: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["ArtworkStatus"][];
                        status?: string;
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getAllArtworkTypes: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["ArtworkType"][];
                        status?: string;
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getAllAwards: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["AwardBaseRecord"][];
                        status?: string;
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getAward: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["AwardBaseRecord"];
                        status?: string;
                    };
                };
            };
            /** @description Invalid awards id */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Awards not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getAwardExtended: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["AwardExtendedRecord"];
                        status?: string;
                    };
                };
            };
            /** @description Invalid awards id */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Awards not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getAwardCategory: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["AwardCategoryBaseRecord"];
                        status?: string;
                    };
                };
            };
            /** @description Invalid category id */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Category not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getAwardCategoryExtended: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["AwardCategoryExtendedRecord"];
                        status?: string;
                    };
                };
            };
            /** @description Invalid category id */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Category not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getCharacterBase: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["Character"];
                        status?: string;
                    };
                };
            };
            /** @description Invalid character id */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Character not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getAllCompanies: {
        parameters: {
            query?: {
                /** @description name */
                page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["Company"][];
                        status?: string;
                        links?: components["schemas"]["Links"];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getCompanyTypes: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["CompanyType"][];
                        status?: string;
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getCompany: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["Company"];
                        status?: string;
                    };
                };
            };
            /** @description Invalid company id */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Company not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getAllContentRatings: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["ContentRating"][];
                        status?: string;
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getAllCountries: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["Country"][];
                        status?: string;
                    };
                };
            };
        };
    };
    getEntityTypes: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["EntityType"][];
                        status?: string;
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getAllEpisodes: {
        parameters: {
            query?: {
                /** @description page number */
                page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["EpisodeBaseRecord"][];
                        status?: string;
                        links?: components["schemas"]["Links"];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getEpisodeBase: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["EpisodeBaseRecord"];
                        status?: string;
                    };
                };
            };
            /** @description Invalid episode id */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Episode not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getEpisodeExtended: {
        parameters: {
            query?: {
                /** @description meta */
                meta?: "translations";
            };
            header?: never;
            path: {
                /** @description id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["EpisodeExtendedRecord"];
                        status?: string;
                    };
                };
            };
            /** @description Invalid episode id */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Episode not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getEpisodeTranslation: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description id */
                id: number;
                /** @description language */
                language: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["Translation"];
                        status?: string;
                    };
                };
            };
            /** @description Invalid episode id. Invalid language. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Episode not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getAllGenders: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["Gender"][];
                        status?: string;
                    };
                };
            };
        };
    };
    getAllGenres: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["GenreBaseRecord"][];
                        status?: string;
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getGenreBase: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["GenreBaseRecord"];
                        status?: string;
                    };
                };
            };
            /** @description Invalid genre id */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Genre not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getAllInspirationTypes: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["InspirationType"][];
                        status?: string;
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getAllLanguages: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["Language"][];
                        status?: string;
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getAllLists: {
        parameters: {
            query?: {
                /** @description page number */
                page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["ListBaseRecord"][];
                        status?: string;
                        links?: components["schemas"]["Links"];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getList: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["ListBaseRecord"];
                        status?: string;
                    };
                };
            };
            /** @description Invalid list id */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description List not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getListBySlug: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description slug */
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["ListBaseRecord"];
                        status?: string;
                    };
                };
            };
            /** @description Invalid list slug */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description List not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getListExtended: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["ListExtendedRecord"];
                        status?: string;
                    };
                };
            };
            /** @description Invalid list id */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Lists not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getListTranslation: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description id */
                id: number;
                /** @description language */
                language: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["Translation"][];
                        status?: string;
                    };
                };
            };
            /** @description Invalid lists id */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Lists not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getAllMovie: {
        parameters: {
            query?: {
                /** @description page number */
                page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["MovieBaseRecord"][];
                        status?: string;
                        links?: components["schemas"]["Links"];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getMovieBase: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["MovieBaseRecord"];
                        status?: string;
                    };
                };
            };
            /** @description Invalid movie id */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Movie not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getMovieExtended: {
        parameters: {
            query?: {
                /** @description meta */
                meta?: "translations";
                /** @description reduce the payload and returns the short version of this record without characters, artworks and trailers. */
                short?: true | false;
            };
            header?: never;
            path: {
                /** @description id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["MovieExtendedRecord"];
                        status?: string;
                    };
                };
            };
            /** @description Invalid movie id */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Movie not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getMoviesFilter: {
        parameters: {
            query: {
                /** @description production company */
                company?: number;
                /** @description content rating id base on a country */
                contentRating?: number;
                /** @description country of origin */
                country: string;
                /** @description genre */
                genre?:
                    | 1
                    | 2
                    | 3
                    | 4
                    | 5
                    | 6
                    | 7
                    | 8
                    | 9
                    | 10
                    | 11
                    | 12
                    | 13
                    | 14
                    | 15
                    | 16
                    | 17
                    | 18
                    | 19
                    | 21
                    | 22
                    | 23
                    | 24
                    | 25
                    | 26
                    | 27
                    | 28
                    | 29
                    | 30
                    | 31
                    | 32
                    | 33
                    | 34
                    | 35
                    | 36;
                /** @description original language */
                lang: string;
                /** @description sort by results */
                sort?: "score" | "firstAired" | "name";
                /** @description status */
                status?: 1 | 2 | 3;
                /** @description release year */
                year?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["MovieBaseRecord"][];
                        status?: string;
                    };
                };
            };
            /** @description Invalid format parameter. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getMovieBaseBySlug: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description slug */
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["MovieBaseRecord"];
                        status?: string;
                    };
                };
            };
            /** @description Invalid movie slug */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Movie not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getMovieTranslation: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description id */
                id: number;
                /** @description language */
                language: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["Translation"];
                        status?: string;
                    };
                };
            };
            /** @description Invalid movie id, invalid language. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Movie not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getAllMovieStatuses: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["Status"][];
                        status?: string;
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getAllPeople: {
        parameters: {
            query?: {
                /** @description page number */
                page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["PeopleBaseRecord"][];
                        status?: string;
                        links?: components["schemas"]["Links"];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getPeopleBase: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["PeopleBaseRecord"];
                        status?: string;
                    };
                };
            };
            /** @description Invalid people id */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description People not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getPeopleExtended: {
        parameters: {
            query?: {
                /** @description meta */
                meta?: "translations";
            };
            header?: never;
            path: {
                /** @description id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["PeopleExtendedRecord"];
                        status?: string;
                    };
                };
            };
            /** @description Invalid people id */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description People not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getPeopleTranslation: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description id */
                id: number;
                /** @description language */
                language: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["Translation"];
                        status?: string;
                    };
                };
            };
            /** @description Invalid people id, invalid language. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description People not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getAllPeopleTypes: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["PeopleType"][];
                        status?: string;
                    };
                };
            };
        };
    };
    getSearchResults: {
        parameters: {
            query?: {
                /** @description The primary search string, which can include the main title for a record including all translations and aliases. */
                query?: string;
                /** @description Alias of the "query" parameter.  Recommend using query instead as this field will eventually be deprecated. */
                q?: string;
                /** @description Restrict results to a specific entity type.  Can be movie, series, person, or company. */
                type?: string;
                /** @description Restrict results to a specific year. Currently only used for series and movies. */
                year?: number;
                /** @description Restrict results to a specific company (original network, production company, studio, etc).  As an example, "The Walking Dead" would have companies of "AMC", "AMC+", and "Disney+". */
                company?: string;
                /** @description Restrict results to a specific country of origin. Should contain a 3 character country code. Currently only used for series and movies. */
                country?: string;
                /** @description Restrict results to a specific director.  Generally only used for movies.  Should include the full name of the director, such as "Steven Spielberg". */
                director?: string;
                /** @description Restrict results to a specific primary language.  Should include the 3 character language code.  Currently only used for series and movies. */
                language?: string;
                /** @description Restrict results to a specific type of company.  Should include the full name of the type of company, such as "Production Company".  Only used for companies. */
                primaryType?: string;
                /** @description Restrict results to a specific network.  Used for TV and TV movies, and functions the same as the company parameter with more specificity. */
                network?: string;
                /** @description Search for a specific remote id.  Allows searching for an IMDB or EIDR id, for example. */
                remote_id?: string;
                /** @description Offset results. */
                offset?: number;
                /** @description Limit results. */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["SearchResult"][];
                        status?: string;
                        links?: components["schemas"]["Links"];
                    };
                };
            };
            /** @description Max results overflow */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getSearchResultsByRemoteId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Search for a specific remote id.  Allows searching for an IMDB or EIDR id, for example. */
                remoteId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["SearchByRemoteIdResult"][];
                        status?: string;
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getAllSeasons: {
        parameters: {
            query?: {
                /** @description page number */
                page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["SeasonBaseRecord"][];
                        status?: string;
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getSeasonBase: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["SeasonBaseRecord"];
                        status?: string;
                    };
                };
            };
            /** @description Invalid season id */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Season not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getSeasonExtended: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["SeasonExtendedRecord"];
                        status?: string;
                    };
                };
            };
            /** @description Invalid seasons id */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Season not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getSeasonTypes: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["SeasonType"][];
                        status?: string;
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getSeasonTranslation: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description id */
                id: number;
                /** @description language */
                language: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["Translation"];
                        status?: string;
                    };
                };
            };
            /** @description Invalid season id, language not found. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Season not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getAllSeries: {
        parameters: {
            query?: {
                /** @description page number */
                page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["SeriesBaseRecord"][];
                        status?: string;
                        links?: components["schemas"]["Links"];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getSeriesBase: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["SeriesBaseRecord"];
                        status?: string;
                    };
                };
            };
            /** @description Invalid series id */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Series not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getSeriesArtworks: {
        parameters: {
            query?: {
                /** @description lang */
                lang?: string;
                /** @description type */
                type?: number;
            };
            header?: never;
            path: {
                /** @description id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["SeriesExtendedRecord"];
                        status?: string;
                    };
                };
            };
            /** @description Invalid series id */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Series not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getSeriesNextAired: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["SeriesBaseRecord"];
                        status?: string;
                    };
                };
            };
            /** @description Invalid series id */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Series not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getSeriesExtended: {
        parameters: {
            query?: {
                /** @description meta */
                meta?: "translations" | "episodes";
                /** @description reduce the payload and returns the short version of this record without characters and artworks */
                short?: true | false;
            };
            header?: never;
            path: {
                /** @description id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["SeriesExtendedRecord"];
                        status?: string;
                    };
                };
            };
            /** @description Invalid series id */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Series not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getSeriesEpisodes: {
        parameters: {
            query: {
                page: number;
                season?: number;
                episodeNumber?: number;
                /** @description airDate of the episode, format is yyyy-mm-dd */
                airDate?: string;
            };
            header?: never;
            path: {
                /** @description id */
                id: number;
                /** @description season-type */
                "season-type": string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: {
                            series?: components["schemas"]["SeriesBaseRecord"];
                            episodes?: components["schemas"]["EpisodeBaseRecord"][];
                        };
                        status?: string;
                    };
                };
            };
            /** @description Invalid series id, episodeNumber is not null then season must be present */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Series not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getSeriesSeasonEpisodesTranslated: {
        parameters: {
            query: {
                page: number;
            };
            header?: never;
            path: {
                /** @description id */
                id: number;
                /** @description season-type */
                "season-type": string;
                lang: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: {
                            series?: components["schemas"]["SeriesBaseRecord"];
                        };
                        status?: string;
                    };
                };
            };
            /** @description Invalid series id, invalid language. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Series not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getSeriesFilter: {
        parameters: {
            query: {
                /** @description production company */
                company?: number;
                /** @description content rating id base on a country */
                contentRating?: number;
                /** @description country of origin */
                country: string;
                /** @description Genre id. This id can be found using **\/genres** endpoint. */
                genre?:
                    | 1
                    | 2
                    | 3
                    | 4
                    | 5
                    | 6
                    | 7
                    | 8
                    | 9
                    | 10
                    | 11
                    | 12
                    | 13
                    | 14
                    | 15
                    | 16
                    | 17
                    | 18
                    | 19
                    | 21
                    | 22
                    | 23
                    | 24
                    | 25
                    | 26
                    | 27
                    | 28
                    | 29
                    | 30
                    | 31
                    | 32
                    | 33
                    | 34
                    | 35
                    | 36;
                /** @description original language */
                lang: string;
                /** @description sort by results */
                sort?: "score" | "firstAired" | "lastAired" | "name";
                /** @description sort type ascending or descending */
                sortType?: "asc" | "desc";
                /** @description status */
                status?: 1 | 2 | 3;
                /** @description release year */
                year?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["SeriesBaseRecord"][];
                    };
                };
            };
            /** @description Invalid format parameter. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getSeriesBaseBySlug: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description slug */
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["SeriesBaseRecord"];
                        status?: string;
                    };
                };
            };
            /** @description Invalid series slug */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Series not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getSeriesTranslation: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description id */
                id: number;
                /** @description language */
                language: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["Translation"];
                        status?: string;
                    };
                };
            };
            /** @description Invalid series id, invalid language. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Series not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getAllSeriesStatuses: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["Status"][];
                        status?: string;
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getAllSourceTypes: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["SourceType"][];
                        status?: string;
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updates: {
        parameters: {
            query: {
                since: number;
                type?:
                    | "artwork"
                    | "award_nominees"
                    | "companies"
                    | "episodes"
                    | "lists"
                    | "people"
                    | "seasons"
                    | "series"
                    | "seriespeople"
                    | "artworktypes"
                    | "award_categories"
                    | "awards"
                    | "company_types"
                    | "content_ratings"
                    | "countries"
                    | "entity_types"
                    | "genres"
                    | "languages"
                    | "movies"
                    | "movie_genres"
                    | "movie_status"
                    | "peopletypes"
                    | "seasontypes"
                    | "sourcetypes"
                    | "tag_options"
                    | "tags"
                    | "translatedcharacters"
                    | "translatedcompanies"
                    | "translatedepisodes"
                    | "translatedlists"
                    | "translatedmovies"
                    | "translatedpeople"
                    | "translatedseasons"
                    | "translatedserierk";
                action?: "delete" | "update";
                /** @description name */
                page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["EntityUpdate"][];
                        status?: string;
                        links?: components["schemas"]["Links"];
                    };
                };
            };
            /** @description Invalid since, type param. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getUserInfo: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: unknown;
                        status?: string;
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getUserInfoById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: unknown;
                        status?: string;
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getUserFavorites: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: unknown;
                        status?: string;
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    createUserFavorites: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["FavoriteRecord"];
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad format */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
