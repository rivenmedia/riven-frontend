// This file is auto-generated by @hey-api/openapi-ts

export const AllDebridModelSchema = {
    properties: {
        enabled: {
            type: 'boolean',
            title: 'Enabled',
            default: false
        },
        api_key: {
            type: 'string',
            title: 'Api Key',
            default: ''
        },
        proxy_enabled: {
            type: 'boolean',
            title: 'Proxy Enabled',
            default: false
        },
        proxy_url: {
            type: 'string',
            title: 'Proxy Url',
            default: ''
        }
    },
    type: 'object',
    title: 'AllDebridModel'
} as const;

export const AnnatarConfigSchema = {
    properties: {
        enabled: {
            type: 'boolean',
            title: 'Enabled',
            default: false
        },
        url: {
            type: 'string',
            title: 'Url',
            default: 'http://annatar.elfhosted.com'
        },
        limit: {
            type: 'integer',
            title: 'Limit',
            default: 2000
        },
        timeout: {
            type: 'integer',
            title: 'Timeout',
            default: 30
        },
        ratelimit: {
            type: 'boolean',
            title: 'Ratelimit',
            default: true
        }
    },
    type: 'object',
    title: 'AnnatarConfig'
} as const;

export const AppModelSchema = {
    properties: {
        version: {
            type: 'string',
            title: 'Version',
            default: '0.16.2'
        },
        api_key: {
            type: 'string',
            title: 'Api Key',
            default: ''
        },
        debug: {
            type: 'boolean',
            title: 'Debug',
            default: true
        },
        log: {
            type: 'boolean',
            title: 'Log',
            default: true
        },
        force_refresh: {
            type: 'boolean',
            title: 'Force Refresh',
            default: false
        },
        map_metadata: {
            type: 'boolean',
            title: 'Map Metadata',
            default: true
        },
        tracemalloc: {
            type: 'boolean',
            title: 'Tracemalloc',
            default: false
        },
        symlink: {
            '$ref': '#/components/schemas/SymlinkModel',
            default: {
                rclone_path: '.',
                library_path: '.',
                separate_anime_dirs: false,
                repair_symlinks: false,
                repair_interval: 6
            }
        },
        updaters: {
            '$ref': '#/components/schemas/UpdatersModel',
            default: {
                updater_interval: 120,
                plex: {
                    enabled: false,
                    token: '',
                    url: 'http://localhost:32400'
                },
                jellyfin: {
                    api_key: '',
                    enabled: false,
                    url: 'http://localhost:8096'
                },
                emby: {
                    api_key: '',
                    enabled: false,
                    url: 'http://localhost:8096'
                }
            }
        },
        downloaders: {
            '$ref': '#/components/schemas/DownloadersModel',
            default: {
                video_extensions: ['mp4', 'mkv', 'avi'],
                prefer_speed_over_quality: true,
                real_debrid: {
                    api_key: '',
                    enabled: false,
                    proxy_enabled: false,
                    proxy_url: ''
                },
                all_debrid: {
                    api_key: '',
                    enabled: false,
                    proxy_enabled: false,
                    proxy_url: ''
                },
                torbox: {
                    api_key: '',
                    enabled: false
                }
            }
        },
        content: {
            '$ref': '#/components/schemas/ContentModel',
            default: {
                overseerr: {
                    api_key: '',
                    enabled: false,
                    update_interval: 60,
                    url: 'http://localhost:5055',
                    use_webhook: false
                },
                plex_watchlist: {
                    enabled: false,
                    rss: [],
                    update_interval: 60
                },
                mdblist: {
                    api_key: '',
                    enabled: false,
                    lists: [],
                    update_interval: 86400
                },
                listrr: {
                    api_key: '',
                    enabled: false,
                    movie_lists: [],
                    show_lists: [],
                    update_interval: 86400
                },
                trakt: {
                    api_key: '',
                    collection: [],
                    enabled: false,
                    fetch_popular: false,
                    fetch_trending: false,
                    popular_count: 10,
                    trending_count: 10,
                    update_interval: 86400,
                    user_lists: [],
                    watchlist: []
                }
            }
        },
        scraping: {
            '$ref': '#/components/schemas/ScraperModel',
            default: {
                after_2: 2,
                after_5: 6,
                after_10: 24,
                parse_debug: false,
                enable_aliases: true,
                torrentio: {
                    enabled: false,
                    filter: 'sort=qualitysize%7Cqualityfilter=480p,scr,cam',
                    ratelimit: true,
                    timeout: 30,
                    url: 'http://torrentio.strem.fun'
                },
                knightcrawler: {
                    enabled: false,
                    filter: 'sort=qualitysize%7Cqualityfilter=480p,scr,cam',
                    ratelimit: true,
                    timeout: 30,
                    url: 'https://knightcrawler.elfhosted.com'
                },
                jackett: {
                    api_key: '',
                    enabled: false,
                    ratelimit: true,
                    timeout: 30,
                    url: 'http://localhost:9117'
                },
                prowlarr: {
                    api_key: '',
                    enabled: false,
                    limiter_seconds: 60,
                    ratelimit: true,
                    timeout: 30,
                    url: 'http://localhost:9696'
                },
                orionoid: {
                    api_key: '',
                    cached_results_only: false,
                    enabled: false,
                    parameters: {
                        limitcount: 5,
                        video3d: 'false',
                        videoquality: 'sd_hd8k'
                    },
                    ratelimit: true,
                    timeout: 30
                },
                annatar: {
                    enabled: false,
                    limit: 2000,
                    ratelimit: true,
                    timeout: 30,
                    url: 'http://annatar.elfhosted.com'
                },
                torbox_scraper: {
                    enabled: false,
                    timeout: 30
                },
                mediafusion: {
                    catalogs: ['prowlarr_streams', 'torrentio_streams', 'zilean_dmm_streams'],
                    enabled: false,
                    ratelimit: true,
                    timeout: 30,
                    url: 'https://mediafusion.elfhosted.com'
                },
                zilean: {
                    enabled: false,
                    ratelimit: true,
                    timeout: 30,
                    url: 'http://localhost:8181'
                },
                comet: {
                    enabled: false,
                    indexers: ['bitsearch', 'eztv', 'thepiratebay', 'therarbg', 'yts'],
                    ratelimit: true,
                    timeout: 30,
                    url: 'http://localhost:8000'
                }
            }
        },
        ranking: {
            '$ref': '#/components/schemas/RTNSettingsModel',
            default: {
                profile: 'default',
                require: [],
                exclude: [],
                preferred: [],
                resolutions: {
                    '1080p': true,
                    '2160p': false,
                    '360p': false,
                    '480p': false,
                    '720p': true,
                    unknown: true
                },
                options: {
                    allow_english_in_languages: false,
                    remove_all_trash: true,
                    remove_ranks_under: -10000,
                    remove_unknown_languages: false,
                    title_similarity: 0.85
                },
                languages: {
                    exclude: [],
                    preferred: [],
                    required: []
                },
                custom_ranks: {
                    audio: {
                        aac: {
                            fetch: true,
                            rank: 0,
                            use_custom_rank: false
                        },
                        ac3: {
                            fetch: true,
                            rank: 0,
                            use_custom_rank: false
                        },
                        atmos: {
                            fetch: true,
                            rank: 0,
                            use_custom_rank: false
                        },
                        dolby_digital: {
                            fetch: true,
                            rank: 0,
                            use_custom_rank: false
                        },
                        dolby_digital_plus: {
                            fetch: true,
                            rank: 0,
                            use_custom_rank: false
                        },
                        dts_lossless: {
                            fetch: true,
                            rank: 0,
                            use_custom_rank: false
                        },
                        dts_lossy: {
                            fetch: true,
                            rank: 0,
                            use_custom_rank: false
                        },
                        eac3: {
                            fetch: true,
                            rank: 0,
                            use_custom_rank: false
                        },
                        flac: {
                            fetch: true,
                            rank: 0,
                            use_custom_rank: false
                        },
                        mono: {
                            fetch: false,
                            rank: 0,
                            use_custom_rank: false
                        },
                        mp3: {
                            fetch: false,
                            rank: 0,
                            use_custom_rank: false
                        },
                        stereo: {
                            fetch: true,
                            rank: 0,
                            use_custom_rank: false
                        },
                        surround: {
                            fetch: true,
                            rank: 0,
                            use_custom_rank: false
                        },
                        truehd: {
                            fetch: true,
                            rank: 0,
                            use_custom_rank: false
                        }
                    },
                    extras: {
                        '3d': {
                            fetch: false,
                            rank: 0,
                            use_custom_rank: false
                        },
                        converted: {
                            fetch: false,
                            rank: 0,
                            use_custom_rank: false
                        },
                        documentary: {
                            fetch: false,
                            rank: 0,
                            use_custom_rank: false
                        },
                        dubbed: {
                            fetch: true,
                            rank: 0,
                            use_custom_rank: false
                        },
                        edition: {
                            fetch: true,
                            rank: 0,
                            use_custom_rank: false
                        },
                        hardcoded: {
                            fetch: true,
                            rank: 0,
                            use_custom_rank: false
                        },
                        network: {
                            fetch: true,
                            rank: 0,
                            use_custom_rank: false
                        },
                        proper: {
                            fetch: true,
                            rank: 0,
                            use_custom_rank: false
                        },
                        repack: {
                            fetch: true,
                            rank: 0,
                            use_custom_rank: false
                        },
                        retail: {
                            fetch: true,
                            rank: 0,
                            use_custom_rank: false
                        },
                        site: {
                            fetch: false,
                            rank: 0,
                            use_custom_rank: false
                        },
                        subbed: {
                            fetch: true,
                            rank: 0,
                            use_custom_rank: false
                        },
                        upscaled: {
                            fetch: false,
                            rank: 0,
                            use_custom_rank: false
                        }
                    },
                    hdr: {
                        '10bit': {
                            fetch: true,
                            rank: 0,
                            use_custom_rank: false
                        },
                        dolby_vision: {
                            fetch: true,
                            rank: 0,
                            use_custom_rank: false
                        },
                        hdr: {
                            fetch: true,
                            rank: 0,
                            use_custom_rank: false
                        },
                        hdr10plus: {
                            fetch: true,
                            rank: 0,
                            use_custom_rank: false
                        },
                        sdr: {
                            fetch: true,
                            rank: 0,
                            use_custom_rank: false
                        }
                    },
                    quality: {
                        av1: {
                            fetch: false,
                            rank: 0,
                            use_custom_rank: false
                        },
                        avc: {
                            fetch: true,
                            rank: 0,
                            use_custom_rank: false
                        },
                        bluray: {
                            fetch: true,
                            rank: 0,
                            use_custom_rank: false
                        },
                        dvd: {
                            fetch: false,
                            rank: 0,
                            use_custom_rank: false
                        },
                        hdtv: {
                            fetch: true,
                            rank: 0,
                            use_custom_rank: false
                        },
                        hevc: {
                            fetch: true,
                            rank: 0,
                            use_custom_rank: false
                        },
                        mpeg: {
                            fetch: false,
                            rank: 0,
                            use_custom_rank: false
                        },
                        remux: {
                            fetch: false,
                            rank: 0,
                            use_custom_rank: false
                        },
                        vhs: {
                            fetch: false,
                            rank: 0,
                            use_custom_rank: false
                        },
                        web: {
                            fetch: true,
                            rank: 0,
                            use_custom_rank: false
                        },
                        webdl: {
                            fetch: true,
                            rank: 0,
                            use_custom_rank: false
                        },
                        webmux: {
                            fetch: false,
                            rank: 0,
                            use_custom_rank: false
                        },
                        xvid: {
                            fetch: false,
                            rank: 0,
                            use_custom_rank: false
                        }
                    },
                    rips: {
                        bdrip: {
                            fetch: false,
                            rank: 0,
                            use_custom_rank: false
                        },
                        brrip: {
                            fetch: false,
                            rank: 0,
                            use_custom_rank: false
                        },
                        dvdrip: {
                            fetch: false,
                            rank: 0,
                            use_custom_rank: false
                        },
                        hdrip: {
                            fetch: false,
                            rank: 0,
                            use_custom_rank: false
                        },
                        ppvrip: {
                            fetch: false,
                            rank: 0,
                            use_custom_rank: false
                        },
                        satrip: {
                            fetch: false,
                            rank: 0,
                            use_custom_rank: false
                        },
                        tvrip: {
                            fetch: false,
                            rank: 0,
                            use_custom_rank: false
                        },
                        uhdrip: {
                            fetch: false,
                            rank: 0,
                            use_custom_rank: false
                        },
                        vhsrip: {
                            fetch: false,
                            rank: 0,
                            use_custom_rank: false
                        },
                        webdlrip: {
                            fetch: false,
                            rank: 0,
                            use_custom_rank: false
                        },
                        webrip: {
                            fetch: true,
                            rank: 0,
                            use_custom_rank: false
                        }
                    },
                    trash: {
                        cam: {
                            fetch: false,
                            rank: 0,
                            use_custom_rank: false
                        },
                        clean_audio: {
                            fetch: false,
                            rank: 0,
                            use_custom_rank: false
                        },
                        pdtv: {
                            fetch: false,
                            rank: 0,
                            use_custom_rank: false
                        },
                        r5: {
                            fetch: false,
                            rank: 0,
                            use_custom_rank: false
                        },
                        screener: {
                            fetch: false,
                            rank: 0,
                            use_custom_rank: false
                        },
                        size: {
                            fetch: false,
                            rank: 0,
                            use_custom_rank: false
                        },
                        telecine: {
                            fetch: false,
                            rank: 0,
                            use_custom_rank: false
                        },
                        telesync: {
                            fetch: false,
                            rank: 0,
                            use_custom_rank: false
                        }
                    }
                }
            }
        },
        indexer: {
            '$ref': '#/components/schemas/IndexerModel',
            default: {
                update_interval: 3600
            }
        },
        database: {
            '$ref': '#/components/schemas/DatabaseModel',
            default: {
                host: 'postgresql+psycopg2://postgres:postgres@localhost/riven'
            }
        },
        notifications: {
            '$ref': '#/components/schemas/NotificationsModel',
            default: {
                enabled: false,
                title: 'Riven completed something!',
                on_item_type: ['movie', 'show', 'season'],
                service_urls: []
            }
        },
        post_processing: {
            '$ref': '#/components/schemas/PostProcessing',
            default: {
                subliminal: {
                    enabled: false,
                    languages: ['eng'],
                    providers: {
                        opensubtitles: {
                            enabled: false,
                            password: '',
                            username: ''
                        },
                        opensubtitlescom: {
                            enabled: false,
                            password: '',
                            username: ''
                        }
                    }
                }
            }
        }
    },
    type: 'object',
    title: 'AppModel'
} as const;

export const CometConfigSchema = {
    properties: {
        enabled: {
            type: 'boolean',
            title: 'Enabled',
            default: false
        },
        url: {
            type: 'string',
            title: 'Url',
            default: 'http://localhost:8000'
        },
        indexers: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Indexers',
            default: ['bitsearch', 'eztv', 'thepiratebay', 'therarbg', 'yts']
        },
        timeout: {
            type: 'integer',
            title: 'Timeout',
            default: 30
        },
        ratelimit: {
            type: 'boolean',
            title: 'Ratelimit',
            default: true
        }
    },
    type: 'object',
    title: 'CometConfig'
} as const;

export const ContentModelSchema = {
    properties: {
        overseerr: {
            '$ref': '#/components/schemas/OverseerrModel',
            default: {
                update_interval: 60,
                enabled: false,
                url: 'http://localhost:5055',
                api_key: '',
                use_webhook: false
            }
        },
        plex_watchlist: {
            '$ref': '#/components/schemas/PlexWatchlistModel',
            default: {
                update_interval: 60,
                enabled: false,
                rss: []
            }
        },
        mdblist: {
            '$ref': '#/components/schemas/MdblistModel',
            default: {
                update_interval: 86400,
                enabled: false,
                api_key: '',
                lists: []
            }
        },
        listrr: {
            '$ref': '#/components/schemas/ListrrModel',
            default: {
                update_interval: 86400,
                enabled: false,
                movie_lists: [],
                show_lists: [],
                api_key: ''
            }
        },
        trakt: {
            '$ref': '#/components/schemas/TraktModel',
            default: {
                update_interval: 86400,
                enabled: false,
                api_key: '',
                watchlist: [],
                user_lists: [],
                collection: [],
                fetch_trending: false,
                trending_count: 10,
                fetch_popular: false,
                popular_count: 10
            }
        }
    },
    type: 'object',
    title: 'ContentModel'
} as const;

export const CustomRankSchema = {
    properties: {
        fetch: {
            type: 'boolean',
            title: 'Fetch',
            default: true
        },
        use_custom_rank: {
            type: 'boolean',
            title: 'Use Custom Rank',
            default: false
        },
        rank: {
            type: 'integer',
            title: 'Rank',
            default: 0
        }
    },
    type: 'object',
    title: 'CustomRank',
    description: 'Custom Ranks used in SettingsModel.'
} as const;

export const DatabaseModelSchema = {
    properties: {
        host: {
            type: 'string',
            title: 'Host',
            default: 'postgresql+psycopg2://postgres:postgres@localhost/riven'
        }
    },
    type: 'object',
    title: 'DatabaseModel'
} as const;

export const DownloadersModelSchema = {
    properties: {
        video_extensions: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Video Extensions',
            default: ['mp4', 'mkv', 'avi']
        },
        prefer_speed_over_quality: {
            type: 'boolean',
            title: 'Prefer Speed Over Quality',
            default: true
        },
        real_debrid: {
            '$ref': '#/components/schemas/RealDebridModel',
            default: {
                enabled: false,
                api_key: '',
                proxy_enabled: false,
                proxy_url: ''
            }
        },
        all_debrid: {
            '$ref': '#/components/schemas/AllDebridModel',
            default: {
                enabled: false,
                api_key: '',
                proxy_enabled: false,
                proxy_url: ''
            }
        },
        torbox: {
            '$ref': '#/components/schemas/TorboxModel',
            default: {
                enabled: false,
                api_key: ''
            }
        }
    },
    type: 'object',
    title: 'DownloadersModel'
} as const;

export const EmbyLibraryModelSchema = {
    properties: {
        enabled: {
            type: 'boolean',
            title: 'Enabled',
            default: false
        },
        api_key: {
            type: 'string',
            title: 'Api Key',
            default: ''
        },
        url: {
            type: 'string',
            title: 'Url',
            default: 'http://localhost:8096'
        }
    },
    type: 'object',
    title: 'EmbyLibraryModel'
} as const;

export const EventResponseSchema = {
    properties: {
        data: {
            type: 'object',
            title: 'Data'
        }
    },
    type: 'object',
    required: ['data'],
    title: 'EventResponse'
} as const;

export const EventUpdateSchema = {
    properties: {
        item_id: {
            type: 'integer',
            title: 'Item Id'
        },
        emitted_by: {
            type: 'string',
            title: 'Emitted By'
        },
        run_at: {
            type: 'string',
            title: 'Run At'
        }
    },
    type: 'object',
    required: ['item_id', 'emitted_by', 'run_at'],
    title: 'EventUpdate'
} as const;

export const HTTPValidationErrorSchema = {
    properties: {
        detail: {
            items: {
                '$ref': '#/components/schemas/ValidationError'
            },
            type: 'array',
            title: 'Detail'
        }
    },
    type: 'object',
    title: 'HTTPValidationError'
} as const;

export const IndexerModelSchema = {
    properties: {
        update_interval: {
            type: 'integer',
            title: 'Update Interval',
            default: 3600
        }
    },
    type: 'object',
    title: 'IndexerModel'
} as const;

export const ItemsResponseSchema = {
    properties: {
        success: {
            type: 'boolean',
            title: 'Success'
        },
        items: {
            items: {
                type: 'object'
            },
            type: 'array',
            title: 'Items'
        },
        page: {
            type: 'integer',
            title: 'Page'
        },
        limit: {
            type: 'integer',
            title: 'Limit'
        },
        total_items: {
            type: 'integer',
            title: 'Total Items'
        },
        total_pages: {
            type: 'integer',
            title: 'Total Pages'
        }
    },
    type: 'object',
    required: ['success', 'items', 'page', 'limit', 'total_items', 'total_pages'],
    title: 'ItemsResponse'
} as const;

export const JackettConfigSchema = {
    properties: {
        enabled: {
            type: 'boolean',
            title: 'Enabled',
            default: false
        },
        url: {
            type: 'string',
            title: 'Url',
            default: 'http://localhost:9117'
        },
        api_key: {
            type: 'string',
            title: 'Api Key',
            default: ''
        },
        timeout: {
            type: 'integer',
            title: 'Timeout',
            default: 30
        },
        ratelimit: {
            type: 'boolean',
            title: 'Ratelimit',
            default: true
        }
    },
    type: 'object',
    title: 'JackettConfig'
} as const;

export const JellyfinLibraryModelSchema = {
    properties: {
        enabled: {
            type: 'boolean',
            title: 'Enabled',
            default: false
        },
        api_key: {
            type: 'string',
            title: 'Api Key',
            default: ''
        },
        url: {
            type: 'string',
            title: 'Url',
            default: 'http://localhost:8096'
        }
    },
    type: 'object',
    title: 'JellyfinLibraryModel'
} as const;

export const KnightcrawlerConfigSchema = {
    properties: {
        enabled: {
            type: 'boolean',
            title: 'Enabled',
            default: false
        },
        filter: {
            type: 'string',
            title: 'Filter',
            default: 'sort=qualitysize%7Cqualityfilter=480p,scr,cam'
        },
        url: {
            type: 'string',
            title: 'Url',
            default: 'https://knightcrawler.elfhosted.com'
        },
        timeout: {
            type: 'integer',
            title: 'Timeout',
            default: 30
        },
        ratelimit: {
            type: 'boolean',
            title: 'Ratelimit',
            default: true
        }
    },
    type: 'object',
    title: 'KnightcrawlerConfig'
} as const;

export const ListrrModelSchema = {
    properties: {
        update_interval: {
            type: 'integer',
            title: 'Update Interval',
            default: 86400
        },
        enabled: {
            type: 'boolean',
            title: 'Enabled',
            default: false
        },
        movie_lists: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Movie Lists',
            default: []
        },
        show_lists: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Show Lists',
            default: []
        },
        api_key: {
            type: 'string',
            title: 'Api Key',
            default: ''
        }
    },
    type: 'object',
    title: 'ListrrModel'
} as const;

export const MdblistModelSchema = {
    properties: {
        update_interval: {
            type: 'integer',
            title: 'Update Interval',
            default: 86400
        },
        enabled: {
            type: 'boolean',
            title: 'Enabled',
            default: false
        },
        api_key: {
            type: 'string',
            title: 'Api Key',
            default: ''
        },
        lists: {
            items: {
                anyOf: [
                    {
                        type: 'string'
                    },
                    {
                        type: 'integer'
                    }
                ]
            },
            type: 'array',
            title: 'Lists',
            default: []
        }
    },
    type: 'object',
    title: 'MdblistModel'
} as const;

export const MediafusionConfigSchema = {
    properties: {
        enabled: {
            type: 'boolean',
            title: 'Enabled',
            default: false
        },
        url: {
            type: 'string',
            title: 'Url',
            default: 'https://mediafusion.elfhosted.com'
        },
        timeout: {
            type: 'integer',
            title: 'Timeout',
            default: 30
        },
        ratelimit: {
            type: 'boolean',
            title: 'Ratelimit',
            default: true
        },
        catalogs: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Catalogs',
            default: ['prowlarr_streams', 'torrentio_streams', 'zilean_dmm_streams']
        }
    },
    type: 'object',
    title: 'MediafusionConfig'
} as const;

export const MessageResponseSchema = {
    properties: {
        message: {
            type: 'string',
            title: 'Message'
        }
    },
    type: 'object',
    required: ['message'],
    title: 'MessageResponse'
} as const;

export const NotificationsModelSchema = {
    properties: {
        enabled: {
            type: 'boolean',
            title: 'Enabled',
            default: false
        },
        title: {
            type: 'string',
            title: 'Title',
            default: 'Riven completed something!'
        },
        on_item_type: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'On Item Type',
            default: ['movie', 'show', 'season']
        },
        service_urls: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Service Urls',
            default: []
        }
    },
    type: 'object',
    title: 'NotificationsModel'
} as const;

export const OrionoidConfigSchema = {
    properties: {
        enabled: {
            type: 'boolean',
            title: 'Enabled',
            default: false
        },
        api_key: {
            type: 'string',
            title: 'Api Key',
            default: ''
        },
        cached_results_only: {
            type: 'boolean',
            title: 'Cached Results Only',
            default: false
        },
        parameters: {
            type: 'object',
            title: 'Parameters',
            default: {
                video3d: 'false',
                videoquality: 'sd_hd8k',
                limitcount: 5
            }
        },
        timeout: {
            type: 'integer',
            title: 'Timeout',
            default: 30
        },
        ratelimit: {
            type: 'boolean',
            title: 'Ratelimit',
            default: true,
            deprecated: true
        }
    },
    type: 'object',
    title: 'OrionoidConfig'
} as const;

export const OverseerrModelSchema = {
    properties: {
        update_interval: {
            type: 'integer',
            title: 'Update Interval',
            default: 60
        },
        enabled: {
            type: 'boolean',
            title: 'Enabled',
            default: false
        },
        url: {
            type: 'string',
            title: 'Url',
            default: 'http://localhost:5055'
        },
        api_key: {
            type: 'string',
            title: 'Api Key',
            default: ''
        },
        use_webhook: {
            type: 'boolean',
            title: 'Use Webhook',
            default: false
        }
    },
    type: 'object',
    title: 'OverseerrModel'
} as const;

export const PlexLibraryModelSchema = {
    properties: {
        enabled: {
            type: 'boolean',
            title: 'Enabled',
            default: false
        },
        token: {
            type: 'string',
            title: 'Token',
            default: ''
        },
        url: {
            type: 'string',
            title: 'Url',
            default: 'http://localhost:32400'
        }
    },
    type: 'object',
    title: 'PlexLibraryModel'
} as const;

export const PlexWatchlistModelSchema = {
    properties: {
        update_interval: {
            type: 'integer',
            title: 'Update Interval',
            default: 60
        },
        enabled: {
            type: 'boolean',
            title: 'Enabled',
            default: false
        },
        rss: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Rss',
            default: []
        }
    },
    type: 'object',
    title: 'PlexWatchlistModel'
} as const;

export const PostProcessingSchema = {
    properties: {
        subliminal: {
            '$ref': '#/components/schemas/SubliminalConfig',
            default: {
                enabled: false,
                languages: ['eng'],
                providers: {
                    opensubtitles: {
                        enabled: false,
                        password: '',
                        username: ''
                    },
                    opensubtitlescom: {
                        enabled: false,
                        password: '',
                        username: ''
                    }
                }
            }
        }
    },
    type: 'object',
    title: 'PostProcessing'
} as const;

export const ProwlarrConfigSchema = {
    properties: {
        enabled: {
            type: 'boolean',
            title: 'Enabled',
            default: false
        },
        url: {
            type: 'string',
            title: 'Url',
            default: 'http://localhost:9696'
        },
        api_key: {
            type: 'string',
            title: 'Api Key',
            default: ''
        },
        timeout: {
            type: 'integer',
            title: 'Timeout',
            default: 30
        },
        ratelimit: {
            type: 'boolean',
            title: 'Ratelimit',
            default: true
        },
        limiter_seconds: {
            type: 'integer',
            title: 'Limiter Seconds',
            default: 60
        }
    },
    type: 'object',
    title: 'ProwlarrConfig'
} as const;

export const RDTorrentSchema = {
    properties: {
        id: {
            type: 'string',
            title: 'Id'
        },
        hash: {
            type: 'string',
            title: 'Hash'
        },
        filename: {
            type: 'string',
            title: 'Filename'
        },
        bytes: {
            type: 'integer',
            title: 'Bytes'
        },
        status: {
            '$ref': '#/components/schemas/RDTorrentStatus'
        },
        added: {
            type: 'string',
            format: 'date-time',
            title: 'Added'
        },
        links: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Links'
        },
        ended: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Ended'
        },
        speed: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Speed'
        },
        seeders: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Seeders'
        }
    },
    type: 'object',
    required: ['id', 'hash', 'filename', 'bytes', 'status', 'added', 'links'],
    title: 'RDTorrent'
} as const;

export const RDTorrentStatusSchema = {
    type: 'string',
    enum: ['magnet_error', 'magnet_conversion', 'waiting_files_selection', 'downloading', 'downloaded', 'error', 'seeding', 'dead', 'uploading', 'compressing'],
    title: 'RDTorrentStatus'
} as const;

export const RDUserSchema = {
    properties: {
        id: {
            type: 'integer',
            title: 'Id'
        },
        username: {
            type: 'string',
            title: 'Username'
        },
        email: {
            type: 'string',
            title: 'Email'
        },
        points: {
            type: 'integer',
            title: 'Points',
            description: "User's RD points"
        },
        locale: {
            type: 'string',
            title: 'Locale'
        },
        avatar: {
            type: 'string',
            title: 'Avatar',
            description: "URL to the user's avatar"
        },
        type: {
            type: 'string',
            enum: ['free', 'premium'],
            title: 'Type'
        },
        premium: {
            type: 'integer',
            title: 'Premium',
            description: 'Premium subscription left in seconds'
        }
    },
    type: 'object',
    required: ['id', 'username', 'email', 'points', 'locale', 'avatar', 'type', 'premium'],
    title: 'RDUser'
} as const;

export const RTNSettingsModelSchema = {
    properties: {
        profile: {
            type: 'string',
            title: 'Profile',
            default: 'default'
        },
        require: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Require',
            default: []
        },
        exclude: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Exclude',
            default: []
        },
        preferred: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Preferred',
            default: []
        },
        resolutions: {
            additionalProperties: {
                type: 'boolean'
            },
            type: 'object',
            title: 'Resolutions',
            default: {
                '2160p': false,
                '1080p': true,
                '720p': true,
                '480p': false,
                '360p': false,
                unknown: true
            }
        },
        options: {
            type: 'object',
            title: 'Options',
            default: {
                title_similarity: 0.85,
                remove_all_trash: true,
                remove_ranks_under: -10000,
                remove_unknown_languages: false,
                allow_english_in_languages: false
            }
        },
        languages: {
            type: 'object',
            title: 'Languages',
            default: {
                required: [],
                exclude: [],
                preferred: []
            }
        },
        custom_ranks: {
            additionalProperties: {
                additionalProperties: {
                    '$ref': '#/components/schemas/CustomRank'
                },
                type: 'object'
            },
            type: 'object',
            title: 'Custom Ranks',
            default: {
                quality: {
                    av1: {
                        fetch: false,
                        rank: 0,
                        use_custom_rank: false
                    },
                    avc: {
                        fetch: true,
                        rank: 0,
                        use_custom_rank: false
                    },
                    bluray: {
                        fetch: true,
                        rank: 0,
                        use_custom_rank: false
                    },
                    dvd: {
                        fetch: false,
                        rank: 0,
                        use_custom_rank: false
                    },
                    hdtv: {
                        fetch: true,
                        rank: 0,
                        use_custom_rank: false
                    },
                    hevc: {
                        fetch: true,
                        rank: 0,
                        use_custom_rank: false
                    },
                    mpeg: {
                        fetch: false,
                        rank: 0,
                        use_custom_rank: false
                    },
                    remux: {
                        fetch: false,
                        rank: 0,
                        use_custom_rank: false
                    },
                    vhs: {
                        fetch: false,
                        rank: 0,
                        use_custom_rank: false
                    },
                    web: {
                        fetch: true,
                        rank: 0,
                        use_custom_rank: false
                    },
                    webdl: {
                        fetch: true,
                        rank: 0,
                        use_custom_rank: false
                    },
                    webmux: {
                        fetch: false,
                        rank: 0,
                        use_custom_rank: false
                    },
                    xvid: {
                        fetch: false,
                        rank: 0,
                        use_custom_rank: false
                    }
                },
                rips: {
                    bdrip: {
                        fetch: false,
                        rank: 0,
                        use_custom_rank: false
                    },
                    brrip: {
                        fetch: false,
                        rank: 0,
                        use_custom_rank: false
                    },
                    dvdrip: {
                        fetch: false,
                        rank: 0,
                        use_custom_rank: false
                    },
                    hdrip: {
                        fetch: false,
                        rank: 0,
                        use_custom_rank: false
                    },
                    ppvrip: {
                        fetch: false,
                        rank: 0,
                        use_custom_rank: false
                    },
                    satrip: {
                        fetch: false,
                        rank: 0,
                        use_custom_rank: false
                    },
                    tvrip: {
                        fetch: false,
                        rank: 0,
                        use_custom_rank: false
                    },
                    uhdrip: {
                        fetch: false,
                        rank: 0,
                        use_custom_rank: false
                    },
                    vhsrip: {
                        fetch: false,
                        rank: 0,
                        use_custom_rank: false
                    },
                    webdlrip: {
                        fetch: false,
                        rank: 0,
                        use_custom_rank: false
                    },
                    webrip: {
                        fetch: true,
                        rank: 0,
                        use_custom_rank: false
                    }
                },
                hdr: {
                    '10bit': {
                        fetch: true,
                        rank: 0,
                        use_custom_rank: false
                    },
                    dolby_vision: {
                        fetch: true,
                        rank: 0,
                        use_custom_rank: false
                    },
                    hdr: {
                        fetch: true,
                        rank: 0,
                        use_custom_rank: false
                    },
                    hdr10plus: {
                        fetch: true,
                        rank: 0,
                        use_custom_rank: false
                    },
                    sdr: {
                        fetch: true,
                        rank: 0,
                        use_custom_rank: false
                    }
                },
                audio: {
                    aac: {
                        fetch: true,
                        rank: 0,
                        use_custom_rank: false
                    },
                    ac3: {
                        fetch: true,
                        rank: 0,
                        use_custom_rank: false
                    },
                    atmos: {
                        fetch: true,
                        rank: 0,
                        use_custom_rank: false
                    },
                    dolby_digital: {
                        fetch: true,
                        rank: 0,
                        use_custom_rank: false
                    },
                    dolby_digital_plus: {
                        fetch: true,
                        rank: 0,
                        use_custom_rank: false
                    },
                    dts_lossless: {
                        fetch: true,
                        rank: 0,
                        use_custom_rank: false
                    },
                    dts_lossy: {
                        fetch: true,
                        rank: 0,
                        use_custom_rank: false
                    },
                    eac3: {
                        fetch: true,
                        rank: 0,
                        use_custom_rank: false
                    },
                    flac: {
                        fetch: true,
                        rank: 0,
                        use_custom_rank: false
                    },
                    mono: {
                        fetch: false,
                        rank: 0,
                        use_custom_rank: false
                    },
                    mp3: {
                        fetch: false,
                        rank: 0,
                        use_custom_rank: false
                    },
                    stereo: {
                        fetch: true,
                        rank: 0,
                        use_custom_rank: false
                    },
                    surround: {
                        fetch: true,
                        rank: 0,
                        use_custom_rank: false
                    },
                    truehd: {
                        fetch: true,
                        rank: 0,
                        use_custom_rank: false
                    }
                },
                extras: {
                    '3d': {
                        fetch: false,
                        rank: 0,
                        use_custom_rank: false
                    },
                    converted: {
                        fetch: false,
                        rank: 0,
                        use_custom_rank: false
                    },
                    documentary: {
                        fetch: false,
                        rank: 0,
                        use_custom_rank: false
                    },
                    dubbed: {
                        fetch: true,
                        rank: 0,
                        use_custom_rank: false
                    },
                    edition: {
                        fetch: true,
                        rank: 0,
                        use_custom_rank: false
                    },
                    hardcoded: {
                        fetch: true,
                        rank: 0,
                        use_custom_rank: false
                    },
                    network: {
                        fetch: true,
                        rank: 0,
                        use_custom_rank: false
                    },
                    proper: {
                        fetch: true,
                        rank: 0,
                        use_custom_rank: false
                    },
                    repack: {
                        fetch: true,
                        rank: 0,
                        use_custom_rank: false
                    },
                    retail: {
                        fetch: true,
                        rank: 0,
                        use_custom_rank: false
                    },
                    site: {
                        fetch: false,
                        rank: 0,
                        use_custom_rank: false
                    },
                    subbed: {
                        fetch: true,
                        rank: 0,
                        use_custom_rank: false
                    },
                    upscaled: {
                        fetch: false,
                        rank: 0,
                        use_custom_rank: false
                    }
                },
                trash: {
                    cam: {
                        fetch: false,
                        rank: 0,
                        use_custom_rank: false
                    },
                    clean_audio: {
                        fetch: false,
                        rank: 0,
                        use_custom_rank: false
                    },
                    pdtv: {
                        fetch: false,
                        rank: 0,
                        use_custom_rank: false
                    },
                    r5: {
                        fetch: false,
                        rank: 0,
                        use_custom_rank: false
                    },
                    screener: {
                        fetch: false,
                        rank: 0,
                        use_custom_rank: false
                    },
                    size: {
                        fetch: false,
                        rank: 0,
                        use_custom_rank: false
                    },
                    telecine: {
                        fetch: false,
                        rank: 0,
                        use_custom_rank: false
                    },
                    telesync: {
                        fetch: false,
                        rank: 0,
                        use_custom_rank: false
                    }
                }
            }
        }
    },
    type: 'object',
    title: 'RTNSettingsModel'
} as const;

export const RealDebridModelSchema = {
    properties: {
        enabled: {
            type: 'boolean',
            title: 'Enabled',
            default: false
        },
        api_key: {
            type: 'string',
            title: 'Api Key',
            default: ''
        },
        proxy_enabled: {
            type: 'boolean',
            title: 'Proxy Enabled',
            default: false
        },
        proxy_url: {
            type: 'string',
            title: 'Proxy Url',
            default: ''
        }
    },
    type: 'object',
    title: 'RealDebridModel'
} as const;

export const RemoveResponseSchema = {
    properties: {
        message: {
            type: 'string',
            title: 'Message'
        },
        ids: {
            items: {
                type: 'integer'
            },
            type: 'array',
            title: 'Ids'
        }
    },
    type: 'object',
    required: ['message', 'ids'],
    title: 'RemoveResponse'
} as const;

export const ResetResponseSchema = {
    properties: {
        message: {
            type: 'string',
            title: 'Message'
        },
        ids: {
            items: {
                type: 'integer'
            },
            type: 'array',
            title: 'Ids'
        }
    },
    type: 'object',
    required: ['message', 'ids'],
    title: 'ResetResponse'
} as const;

export const RetryResponseSchema = {
    properties: {
        message: {
            type: 'string',
            title: 'Message'
        },
        ids: {
            items: {
                type: 'integer'
            },
            type: 'array',
            title: 'Ids'
        }
    },
    type: 'object',
    required: ['message', 'ids'],
    title: 'RetryResponse'
} as const;

export const RootResponseSchema = {
    properties: {
        message: {
            type: 'string',
            title: 'Message'
        },
        version: {
            type: 'string',
            title: 'Version'
        }
    },
    type: 'object',
    required: ['message', 'version'],
    title: 'RootResponse'
} as const;

export const ScrapedTorrentSchema = {
    properties: {
        rank: {
            type: 'integer',
            title: 'Rank'
        },
        raw_title: {
            type: 'string',
            title: 'Raw Title'
        },
        infohash: {
            type: 'string',
            title: 'Infohash'
        }
    },
    type: 'object',
    required: ['rank', 'raw_title', 'infohash'],
    title: 'ScrapedTorrent'
} as const;

export const ScraperModelSchema = {
    properties: {
        after_2: {
            type: 'number',
            title: 'After 2',
            default: 2
        },
        after_5: {
            type: 'integer',
            title: 'After 5',
            default: 6
        },
        after_10: {
            type: 'integer',
            title: 'After 10',
            default: 24
        },
        parse_debug: {
            type: 'boolean',
            title: 'Parse Debug',
            default: false
        },
        enable_aliases: {
            type: 'boolean',
            title: 'Enable Aliases',
            default: true
        },
        torrentio: {
            '$ref': '#/components/schemas/TorrentioConfig',
            default: {
                enabled: false,
                filter: 'sort=qualitysize%7Cqualityfilter=480p,scr,cam',
                url: 'http://torrentio.strem.fun',
                timeout: 30,
                ratelimit: true
            }
        },
        knightcrawler: {
            '$ref': '#/components/schemas/KnightcrawlerConfig',
            default: {
                enabled: false,
                filter: 'sort=qualitysize%7Cqualityfilter=480p,scr,cam',
                url: 'https://knightcrawler.elfhosted.com',
                timeout: 30,
                ratelimit: true
            }
        },
        jackett: {
            '$ref': '#/components/schemas/JackettConfig',
            default: {
                enabled: false,
                url: 'http://localhost:9117',
                api_key: '',
                timeout: 30,
                ratelimit: true
            }
        },
        prowlarr: {
            '$ref': '#/components/schemas/ProwlarrConfig',
            default: {
                enabled: false,
                url: 'http://localhost:9696',
                api_key: '',
                timeout: 30,
                ratelimit: true,
                limiter_seconds: 60
            }
        },
        orionoid: {
            '$ref': '#/components/schemas/OrionoidConfig',
            default: {
                enabled: false,
                api_key: '',
                cached_results_only: false,
                parameters: {
                    limitcount: 5,
                    video3d: 'false',
                    videoquality: 'sd_hd8k'
                },
                timeout: 30,
                ratelimit: true
            }
        },
        annatar: {
            '$ref': '#/components/schemas/AnnatarConfig',
            default: {
                enabled: false,
                url: 'http://annatar.elfhosted.com',
                limit: 2000,
                timeout: 30,
                ratelimit: true
            }
        },
        torbox_scraper: {
            '$ref': '#/components/schemas/TorBoxScraperConfig',
            default: {
                enabled: false,
                timeout: 30
            }
        },
        mediafusion: {
            '$ref': '#/components/schemas/MediafusionConfig',
            default: {
                enabled: false,
                url: 'https://mediafusion.elfhosted.com',
                timeout: 30,
                ratelimit: true,
                catalogs: ['prowlarr_streams', 'torrentio_streams', 'zilean_dmm_streams']
            }
        },
        zilean: {
            '$ref': '#/components/schemas/ZileanConfig',
            default: {
                enabled: false,
                url: 'http://localhost:8181',
                timeout: 30,
                ratelimit: true
            }
        },
        comet: {
            '$ref': '#/components/schemas/CometConfig',
            default: {
                enabled: false,
                url: 'http://localhost:8000',
                indexers: ['bitsearch', 'eztv', 'thepiratebay', 'therarbg', 'yts'],
                timeout: 30,
                ratelimit: true
            }
        }
    },
    type: 'object',
    title: 'ScraperModel'
} as const;

export const SetSettingsSchema = {
    properties: {
        key: {
            type: 'string',
            title: 'Key'
        },
        value: {
            title: 'Value'
        }
    },
    type: 'object',
    required: ['key', 'value'],
    title: 'SetSettings'
} as const;

export const SetTorrentRDResponseSchema = {
    properties: {
        message: {
            type: 'string',
            title: 'Message'
        },
        item_id: {
            type: 'integer',
            title: 'Item Id'
        },
        torrent_id: {
            type: 'string',
            title: 'Torrent Id'
        }
    },
    type: 'object',
    required: ['message', 'item_id', 'torrent_id'],
    title: 'SetTorrentRDResponse'
} as const;

export const StateResponseSchema = {
    properties: {
        success: {
            type: 'boolean',
            title: 'Success'
        },
        states: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'States'
        }
    },
    type: 'object',
    required: ['success', 'states'],
    title: 'StateResponse'
} as const;

export const StatesSchema = {
    type: 'string',
    enum: ['Unknown', 'Unreleased', 'Ongoing', 'Requested', 'Indexed', 'Scraped', 'Downloaded', 'Symlinked', 'Completed', 'PartiallyCompleted', 'Failed'],
    title: 'States'
} as const;

export const StatsResponseSchema = {
    properties: {
        total_items: {
            type: 'integer',
            title: 'Total Items'
        },
        total_movies: {
            type: 'integer',
            title: 'Total Movies'
        },
        total_shows: {
            type: 'integer',
            title: 'Total Shows'
        },
        total_seasons: {
            type: 'integer',
            title: 'Total Seasons'
        },
        total_episodes: {
            type: 'integer',
            title: 'Total Episodes'
        },
        total_symlinks: {
            type: 'integer',
            title: 'Total Symlinks'
        },
        incomplete_items: {
            type: 'integer',
            title: 'Incomplete Items'
        },
        incomplete_retries: {
            additionalProperties: {
                type: 'integer'
            },
            type: 'object',
            title: 'Incomplete Retries',
            description: 'Media item log string: number of retries'
        },
        states: {
            additionalProperties: {
                type: 'integer'
            },
            type: 'object',
            title: 'States'
        }
    },
    type: 'object',
    required: ['total_items', 'total_movies', 'total_shows', 'total_seasons', 'total_episodes', 'total_symlinks', 'incomplete_items', 'incomplete_retries', 'states'],
    title: 'StatsResponse'
} as const;

export const SubliminalConfigSchema = {
    properties: {
        enabled: {
            type: 'boolean',
            title: 'Enabled',
            default: false
        },
        languages: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Languages',
            default: ['eng']
        },
        providers: {
            type: 'object',
            title: 'Providers',
            default: {
                opensubtitles: {
                    enabled: false,
                    password: '',
                    username: ''
                },
                opensubtitlescom: {
                    enabled: false,
                    password: '',
                    username: ''
                }
            }
        }
    },
    type: 'object',
    title: 'SubliminalConfig'
} as const;

export const SymlinkModelSchema = {
    properties: {
        rclone_path: {
            type: 'string',
            format: 'path',
            title: 'Rclone Path',
            default: '.'
        },
        library_path: {
            type: 'string',
            format: 'path',
            title: 'Library Path',
            default: '.'
        },
        separate_anime_dirs: {
            type: 'boolean',
            title: 'Separate Anime Dirs',
            default: false
        },
        repair_symlinks: {
            type: 'boolean',
            title: 'Repair Symlinks',
            default: false
        },
        repair_interval: {
            type: 'number',
            title: 'Repair Interval',
            default: 6
        }
    },
    type: 'object',
    title: 'SymlinkModel'
} as const;

export const TorBoxScraperConfigSchema = {
    properties: {
        enabled: {
            type: 'boolean',
            title: 'Enabled',
            default: false
        },
        timeout: {
            type: 'integer',
            title: 'Timeout',
            default: 30
        }
    },
    type: 'object',
    title: 'TorBoxScraperConfig'
} as const;

export const TorboxModelSchema = {
    properties: {
        enabled: {
            type: 'boolean',
            title: 'Enabled',
            default: false
        },
        api_key: {
            type: 'string',
            title: 'Api Key',
            default: ''
        }
    },
    type: 'object',
    title: 'TorboxModel'
} as const;

export const TorrentioConfigSchema = {
    properties: {
        enabled: {
            type: 'boolean',
            title: 'Enabled',
            default: false
        },
        filter: {
            type: 'string',
            title: 'Filter',
            default: 'sort=qualitysize%7Cqualityfilter=480p,scr,cam'
        },
        url: {
            type: 'string',
            title: 'Url',
            default: 'http://torrentio.strem.fun'
        },
        timeout: {
            type: 'integer',
            title: 'Timeout',
            default: 30
        },
        ratelimit: {
            type: 'boolean',
            title: 'Ratelimit',
            default: true,
            deprecated: true
        }
    },
    type: 'object',
    title: 'TorrentioConfig'
} as const;

export const TraktModelSchema = {
    properties: {
        update_interval: {
            type: 'integer',
            title: 'Update Interval',
            default: 86400
        },
        enabled: {
            type: 'boolean',
            title: 'Enabled',
            default: false
        },
        api_key: {
            type: 'string',
            title: 'Api Key',
            default: ''
        },
        watchlist: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Watchlist',
            default: []
        },
        user_lists: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'User Lists',
            default: []
        },
        collection: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Collection',
            default: []
        },
        fetch_trending: {
            type: 'boolean',
            title: 'Fetch Trending',
            default: false
        },
        trending_count: {
            type: 'integer',
            title: 'Trending Count',
            default: 10
        },
        fetch_popular: {
            type: 'boolean',
            title: 'Fetch Popular',
            default: false
        },
        popular_count: {
            type: 'integer',
            title: 'Popular Count',
            default: 10
        }
    },
    type: 'object',
    title: 'TraktModel'
} as const;

export const TraktOAuthInitiateResponseSchema = {
    properties: {
        auth_url: {
            type: 'string',
            title: 'Auth Url'
        }
    },
    type: 'object',
    required: ['auth_url'],
    title: 'TraktOAuthInitiateResponse'
} as const;

export const UpdatersModelSchema = {
    properties: {
        updater_interval: {
            type: 'integer',
            title: 'Updater Interval',
            default: 120
        },
        plex: {
            '$ref': '#/components/schemas/PlexLibraryModel',
            default: {
                enabled: false,
                token: '',
                url: 'http://localhost:32400'
            }
        },
        jellyfin: {
            '$ref': '#/components/schemas/JellyfinLibraryModel',
            default: {
                enabled: false,
                api_key: '',
                url: 'http://localhost:8096'
            }
        },
        emby: {
            '$ref': '#/components/schemas/EmbyLibraryModel',
            default: {
                enabled: false,
                api_key: '',
                url: 'http://localhost:8096'
            }
        }
    },
    type: 'object',
    title: 'UpdatersModel'
} as const;

export const ValidationErrorSchema = {
    properties: {
        loc: {
            items: {
                anyOf: [
                    {
                        type: 'string'
                    },
                    {
                        type: 'integer'
                    }
                ]
            },
            type: 'array',
            title: 'Location'
        },
        msg: {
            type: 'string',
            title: 'Message'
        },
        type: {
            type: 'string',
            title: 'Error Type'
        }
    },
    type: 'object',
    required: ['loc', 'msg', 'type'],
    title: 'ValidationError'
} as const;

export const ZileanConfigSchema = {
    properties: {
        enabled: {
            type: 'boolean',
            title: 'Enabled',
            default: false
        },
        url: {
            type: 'string',
            title: 'Url',
            default: 'http://localhost:8181'
        },
        timeout: {
            type: 'integer',
            title: 'Timeout',
            default: 30
        },
        ratelimit: {
            type: 'boolean',
            title: 'Ratelimit',
            default: true,
            deprecated: true
        }
    },
    type: 'object',
    title: 'ZileanConfig'
} as const;