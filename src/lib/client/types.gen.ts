// This file is auto-generated by @hey-api/openapi-ts

export type AllDebridModel = {
    enabled?: boolean;
    api_key?: string;
    proxy_enabled?: boolean;
    proxy_url?: string;
};

export type AnnatarConfig = {
    enabled?: boolean;
    url?: string;
    limit?: number;
    timeout?: number;
    ratelimit?: boolean;
};

export type AppModel = {
    version?: string;
    api_key?: string;
    debug?: boolean;
    log?: boolean;
    force_refresh?: boolean;
    map_metadata?: boolean;
    tracemalloc?: boolean;
    symlink?: SymlinkModel;
    updaters?: UpdatersModel;
    downloaders?: DownloadersModel;
    content?: ContentModel;
    scraping?: ScraperModel;
    ranking?: RTNSettingsModel;
    indexer?: IndexerModel;
    database?: DatabaseModel;
    notifications?: NotificationsModel;
    post_processing?: PostProcessing;
};

export type CometConfig = {
    enabled?: boolean;
    url?: string;
    indexers?: Array<(string)>;
    timeout?: number;
    ratelimit?: boolean;
};

export type ContentModel = {
    overseerr?: OverseerrModel;
    plex_watchlist?: PlexWatchlistModel;
    mdblist?: MdblistModel;
    listrr?: ListrrModel;
    trakt?: TraktModel;
};

/**
 * Custom Ranks used in SettingsModel.
 */
export type CustomRank = {
    fetch?: boolean;
    use_custom_rank?: boolean;
    rank?: number;
};

export type DatabaseModel = {
    host?: string;
};

export type DownloadersModel = {
    video_extensions?: Array<(string)>;
    prefer_speed_over_quality?: boolean;
    real_debrid?: RealDebridModel;
    all_debrid?: AllDebridModel;
    torbox?: TorboxModel;
};

export type EmbyLibraryModel = {
    enabled?: boolean;
    api_key?: string;
    url?: string;
};

export type EventResponse = {
    data: {
        [key: string]: unknown;
    };
};

export type EventUpdate = {
    item_id: number;
    emitted_by: string;
    run_at: string;
};

export type HTTPValidationError = {
    detail?: Array<ValidationError>;
};

export type IndexerModel = {
    update_interval?: number;
};

export type ItemsResponse = {
    success: boolean;
    items: Array<{
        [key: string]: unknown;
    }>;
    page: number;
    limit: number;
    total_items: number;
    total_pages: number;
};

export type JackettConfig = {
    enabled?: boolean;
    url?: string;
    api_key?: string;
    timeout?: number;
    ratelimit?: boolean;
};

export type JellyfinLibraryModel = {
    enabled?: boolean;
    api_key?: string;
    url?: string;
};

export type KnightcrawlerConfig = {
    enabled?: boolean;
    filter?: string;
    url?: string;
    timeout?: number;
    ratelimit?: boolean;
};

export type ListrrModel = {
    update_interval?: number;
    enabled?: boolean;
    movie_lists?: Array<(string)>;
    show_lists?: Array<(string)>;
    api_key?: string;
};

export type MdblistModel = {
    update_interval?: number;
    enabled?: boolean;
    api_key?: string;
    lists?: Array<(string | number)>;
};

export type MediafusionConfig = {
    enabled?: boolean;
    url?: string;
    timeout?: number;
    ratelimit?: boolean;
    catalogs?: Array<(string)>;
};

export type MessageResponse = {
    message: string;
};

export type NotificationsModel = {
    enabled?: boolean;
    title?: string;
    on_item_type?: Array<(string)>;
    service_urls?: Array<(string)>;
};

export type OrionoidConfig = {
    enabled?: boolean;
    api_key?: string;
    cached_results_only?: boolean;
    parameters?: {
        [key: string]: unknown;
    };
    timeout?: number;
    /**
     * @deprecated
     */
    ratelimit?: boolean;
};

export type OverseerrModel = {
    update_interval?: number;
    enabled?: boolean;
    url?: string;
    api_key?: string;
    use_webhook?: boolean;
};

export type PlexLibraryModel = {
    enabled?: boolean;
    token?: string;
    url?: string;
};

export type PlexWatchlistModel = {
    update_interval?: number;
    enabled?: boolean;
    rss?: Array<(string)>;
};

export type PostProcessing = {
    subliminal?: SubliminalConfig;
};

export type ProwlarrConfig = {
    enabled?: boolean;
    url?: string;
    api_key?: string;
    timeout?: number;
    ratelimit?: boolean;
    limiter_seconds?: number;
};

export type RDTorrent = {
    id: string;
    hash: string;
    filename: string;
    bytes: number;
    status: RDTorrentStatus;
    added: string;
    links: Array<(string)>;
    ended?: (string | null);
    speed?: (number | null);
    seeders?: (number | null);
};

export type RDTorrentStatus = 'magnet_error' | 'magnet_conversion' | 'waiting_files_selection' | 'downloading' | 'downloaded' | 'error' | 'seeding' | 'dead' | 'uploading' | 'compressing';

export type RDUser = {
    id: number;
    username: string;
    email: string;
    /**
     * User's RD points
     */
    points: number;
    locale: string;
    /**
     * URL to the user's avatar
     */
    avatar: string;
    type: 'free' | 'premium';
    /**
     * Premium subscription left in seconds
     */
    premium: number;
};

export type type = 'free' | 'premium';

export type RTNSettingsModel = {
    profile?: string;
    require?: Array<(string)>;
    exclude?: Array<(string)>;
    preferred?: Array<(string)>;
    resolutions?: {
        [key: string]: (boolean);
    };
    options?: {
        [key: string]: unknown;
    };
    languages?: {
        [key: string]: unknown;
    };
    custom_ranks?: {
        [key: string]: {
            [key: string]: CustomRank;
        };
    };
};

export type RealDebridModel = {
    enabled?: boolean;
    api_key?: string;
    proxy_enabled?: boolean;
    proxy_url?: string;
};

export type RemoveResponse = {
    message: string;
    ids: Array<(number)>;
};

export type ResetResponse = {
    message: string;
    ids: Array<(number)>;
};

export type RetryResponse = {
    message: string;
    ids: Array<(number)>;
};

export type RootResponse = {
    message: string;
    version: string;
};

export type ScrapedTorrent = {
    rank: number;
    raw_title: string;
    infohash: string;
};

export type ScraperModel = {
    after_2?: number;
    after_5?: number;
    after_10?: number;
    parse_debug?: boolean;
    enable_aliases?: boolean;
    torrentio?: TorrentioConfig;
    knightcrawler?: KnightcrawlerConfig;
    jackett?: JackettConfig;
    prowlarr?: ProwlarrConfig;
    orionoid?: OrionoidConfig;
    annatar?: AnnatarConfig;
    torbox_scraper?: TorBoxScraperConfig;
    mediafusion?: MediafusionConfig;
    zilean?: ZileanConfig;
    comet?: CometConfig;
};

export type SetSettings = {
    key: string;
    value: unknown;
};

export type SetTorrentRDResponse = {
    message: string;
    item_id: number;
    torrent_id: string;
};

export type StateResponse = {
    success: boolean;
    states: Array<(string)>;
};

export type States = 'Unknown' | 'Unreleased' | 'Ongoing' | 'Requested' | 'Indexed' | 'Scraped' | 'Downloaded' | 'Symlinked' | 'Completed' | 'PartiallyCompleted' | 'Failed';

export type StatsResponse = {
    total_items: number;
    total_movies: number;
    total_shows: number;
    total_seasons: number;
    total_episodes: number;
    total_symlinks: number;
    incomplete_items: number;
    /**
     * Media item log string: number of retries
     */
    incomplete_retries: {
        [key: string]: (number);
    };
    states: {
        [key: string]: (number);
    };
};

export type SubliminalConfig = {
    enabled?: boolean;
    languages?: Array<(string)>;
    providers?: {
        [key: string]: unknown;
    };
};

export type SymlinkModel = {
    rclone_path?: string;
    library_path?: string;
    separate_anime_dirs?: boolean;
    repair_symlinks?: boolean;
    repair_interval?: number;
};

export type TorBoxScraperConfig = {
    enabled?: boolean;
    timeout?: number;
};

export type TorboxModel = {
    enabled?: boolean;
    api_key?: string;
};

export type TorrentioConfig = {
    enabled?: boolean;
    filter?: string;
    url?: string;
    timeout?: number;
    /**
     * @deprecated
     */
    ratelimit?: boolean;
};

export type TraktModel = {
    update_interval?: number;
    enabled?: boolean;
    api_key?: string;
    watchlist?: Array<(string)>;
    user_lists?: Array<(string)>;
    collection?: Array<(string)>;
    fetch_trending?: boolean;
    trending_count?: number;
    fetch_popular?: boolean;
    popular_count?: number;
};

export type TraktOAuthInitiateResponse = {
    auth_url: string;
};

export type UpdatersModel = {
    updater_interval?: number;
    plex?: PlexLibraryModel;
    jellyfin?: JellyfinLibraryModel;
    emby?: EmbyLibraryModel;
};

export type ValidationError = {
    loc: Array<(string | number)>;
    msg: string;
    type: string;
};

export type ZileanConfig = {
    enabled?: boolean;
    url?: string;
    timeout?: number;
    /**
     * @deprecated
     */
    ratelimit?: boolean;
};

export type RootResponse2 = (RootResponse);

export type RootError = unknown;

export type HealthResponse = (MessageResponse);

export type HealthError = (unknown);

export type RdResponse = (RDUser);

export type RdError = (unknown);

export type GenerateapikeyResponse = (MessageResponse);

export type GenerateapikeyError = (unknown);

export type TorboxResponse = (unknown);

export type TorboxError = (unknown);

export type ServicesResponse = ({
    [key: string]: (boolean);
});

export type ServicesError = (unknown);

export type TraktOauthInitiateResponse = (TraktOAuthInitiateResponse);

export type TraktOauthInitiateError = (unknown);

export type TraktOauthCallbackData = {
    query: {
        code: string;
    };
};

export type TraktOauthCallbackResponse = (MessageResponse);

export type TraktOauthCallbackError = (unknown | HTTPValidationError);

export type StatsResponse2 = (StatsResponse);

export type StatsError = (unknown);

export type LogsResponse = (string);

export type LogsError = (unknown);

export type EventsResponse = ({
    [key: string]: Array<EventUpdate>;
});

export type EventsError = (unknown);

export type MountResponse = ({
    [key: string]: (string);
});

export type MountError = (unknown);

export type OverseerrApiV1WebhookOverseerrPostResponse = ({
    [key: string]: unknown;
});

export type OverseerrApiV1WebhookOverseerrPostError = (unknown);

export type GetStatesResponse = (StateResponse);

export type GetStatesError = (unknown);

export type GetItemsData = {
    query?: {
        extended?: (boolean | null);
        is_anime?: (boolean | null);
        limit?: (number | null);
        page?: (number | null);
        search?: (string | null);
        sort?: ('date_desc' | 'date_asc' | 'title_asc' | 'title_desc' | null);
        states?: (string | null);
        type?: (string | null);
    };
};

export type GetItemsResponse = (ItemsResponse);

export type GetItemsError = (unknown | HTTPValidationError);

export type AddItemsData = {
    query?: {
        imdb_ids?: string;
    };
};

export type AddItemsResponse = (MessageResponse);

export type AddItemsError = (unknown | HTTPValidationError);

export type AddItemManuallyData = {
    query?: {
        imdb_id?: string;
        input?: string;
    };
};

export type AddItemManuallyResponse = (MessageResponse);

export type AddItemManuallyError = (unknown | HTTPValidationError);

export type GetItemData = {
    path: {
        id: number;
    };
    query?: {
        use_tmdb_id?: (boolean | null);
    };
};

export type GetItemResponse = ({
    [key: string]: unknown;
});

export type GetItemError = (unknown | HTTPValidationError);

export type GetItemsByImdbIdsData = {
    path: {
        imdb_ids: string;
    };
};

export type GetItemsByImdbIdsResponse = (Array<{
    [key: string]: unknown;
}>);

export type GetItemsByImdbIdsError = (unknown | HTTPValidationError);

export type ResetItemsData = {
    query: {
        ids: string;
    };
};

export type ResetItemsResponse = (ResetResponse);

export type ResetItemsError = (unknown | HTTPValidationError);

export type RetryItemsData = {
    query: {
        ids: string;
    };
};

export type RetryItemsResponse = (RetryResponse);

export type RetryItemsError = (unknown | HTTPValidationError);

export type RemoveItemData = {
    query: {
        ids: string;
    };
};

export type RemoveItemResponse = (RemoveResponse);

export type RemoveItemError = (unknown | HTTPValidationError);

export type SetTorrentRdMagnetData = {
    path: {
        id: number;
    };
    query: {
        magnet: string;
    };
};

export type SetTorrentRdMagnetResponse = (SetTorrentRDResponse);

export type SetTorrentRdMagnetError = (unknown | HTTPValidationError);

export type SetTorrentRdApiV1ItemsIdSetTorrentRdPostData = {
    path: {
        id: number;
    };
    query: {
        torrent_id: string;
    };
};

export type SetTorrentRdApiV1ItemsIdSetTorrentRdPostResponse = (SetTorrentRDResponse);

export type SetTorrentRdApiV1ItemsIdSetTorrentRdPostError = (unknown | HTTPValidationError);

export type ScrapeData = {
    query: {
        episode?: number;
        imdb_id: string;
        season?: number;
    };
};

export type ScrapeResponse = (Array<ScrapedTorrent>);

export type ScrapeError = (HTTPValidationError);

export type GetRdTorrentsData = {
    query?: {
        limit?: number;
    };
};

export type GetRdTorrentsResponse = (Array<RDTorrent>);

export type GetRdTorrentsError = (HTTPValidationError);

export type GetSettingsSchemaResponse = ({
    [key: string]: unknown;
});

export type GetSettingsSchemaError = (unknown);

export type LoadSettingsResponse = (MessageResponse);

export type LoadSettingsError = (unknown);

export type SaveSettingsResponse = (MessageResponse);

export type SaveSettingsError = (unknown);

export type GetAllSettingsResponse = (AppModel);

export type GetAllSettingsError = (unknown);

export type GetSettingsData = {
    path: {
        paths: string;
    };
};

export type GetSettingsResponse = ({
    [key: string]: unknown;
});

export type GetSettingsError = (unknown | HTTPValidationError);

export type SetAllSettingsData = {
    body: {
        [key: string]: unknown;
    };
};

export type SetAllSettingsResponse = (MessageResponse);

export type SetAllSettingsError = (unknown | HTTPValidationError);

export type SetSettingsData = {
    body: Array<SetSettings>;
};

export type SetSettingsResponse = (MessageResponse);

export type SetSettingsError = (unknown | HTTPValidationError);

export type GetEventTypesApiV1StreamEventTypesGetResponse = (unknown);

export type GetEventTypesApiV1StreamEventTypesGetError = (unknown);

export type StreamEventsApiV1StreamEventTypeGetData = {
    path: {
        event_type: string;
    };
};

export type StreamEventsApiV1StreamEventTypeGetResponse = (EventResponse);

export type StreamEventsApiV1StreamEventTypeGetError = (unknown | HTTPValidationError);