// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { RootData, RootResponse2, HealthData, HealthResponse, RdData, RdResponse, GenerateapikeyData, GenerateapikeyResponse, ServicesData, ServicesResponse, TraktOauthInitiateData, TraktOauthInitiateResponse, TraktOauthCallbackData, TraktOauthCallbackResponse, TraktOauthCallbackError, StatsData, StatsResponse2, LogsData, LogsResponse2, EventsData, EventsResponse, MountData, MountResponse2, UploadLogsData, UploadLogsResponse2, FetchCalendarData, FetchCalendarResponse, GetStatesData, GetStatesResponse, GetItemsData, GetItemsResponse, GetItemsError, AddItemsData, AddItemsResponse, AddItemsError, GetItemData, GetItemResponse, GetItemError, GetItemsByImdbIdsData, GetItemsByImdbIdsResponse, GetItemsByImdbIdsError, ResetItemsData, ResetItemsResponse, ResetItemsError, RetryItemsData, RetryItemsResponse, RetryItemsError, RetryLibraryItemsData, RetryLibraryItemsResponse, UpdateOngoingItemsData, UpdateOngoingItemsResponse, RepairSymlinksData, RepairSymlinksResponse2, RepairSymlinksError, RemoveItemData, RemoveItemResponse, RemoveItemError, GetItemStreamsApiV1ItemsItemIdStreamsGetData, GetItemStreamsApiV1ItemsItemIdStreamsGetError, BlacklistStreamApiV1ItemsItemIdStreamsStreamIdBlacklistPostData, BlacklistStreamApiV1ItemsItemIdStreamsStreamIdBlacklistPostError, UnblacklistStreamApiV1ItemsItemIdStreamsStreamIdUnblacklistPostData, UnblacklistStreamApiV1ItemsItemIdStreamsStreamIdUnblacklistPostError, ResetItemStreamsData, ResetItemStreamsError, PauseItemsData, PauseItemsResponse, PauseItemsError, UnpauseItemsData, UnpauseItemsResponse, UnpauseItemsError, FfprobeMediaFilesData, FfprobeMediaFilesResponse, FfprobeMediaFilesError, ScrapeItemData, ScrapeItemResponse2, ScrapeItemError, StartManualSessionData, StartManualSessionResponse, StartManualSessionError, ManualSelectData, ManualSelectResponse, ManualSelectError, ManualUpdateAttributesData, ManualUpdateAttributesResponse, ManualUpdateAttributesError, AbortManualSessionData, AbortManualSessionResponse, AbortManualSessionError, CompleteManualSessionData, CompleteManualSessionResponse, CompleteManualSessionError, ParseTorrentTitlesData, ParseTorrentTitlesResponse, ParseTorrentTitlesError, GetSettingsSchemaData, GetSettingsSchemaResponse, LoadSettingsData, LoadSettingsResponse, SaveSettingsData, SaveSettingsResponse, GetAllSettingsData, GetAllSettingsResponse, GetSettingsData, GetSettingsResponse, GetSettingsError, SetAllSettingsData, SetAllSettingsResponse, SetAllSettingsError, SetSettingsData, SetSettingsResponse, SetSettingsError, OverseerrApiV1WebhookOverseerrPostData, OverseerrApiV1WebhookOverseerrPostResponse, GetEventTypesApiV1StreamEventTypesGetData, StreamEventsApiV1StreamEventTypeGetData, StreamEventsApiV1StreamEventTypeGetResponse, StreamEventsApiV1StreamEventTypeGetError } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Root
 */
export const root = <ThrowOnError extends boolean = false>(options?: Options<RootData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<RootResponse2, unknown, ThrowOnError>({
        url: '/api/v1/',
        ...options
    });
};

/**
 * Health
 */
export const health = <ThrowOnError extends boolean = false>(options?: Options<HealthData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<HealthResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/health',
        ...options
    });
};

/**
 * Get Rd User
 */
export const rd = <ThrowOnError extends boolean = false>(options?: Options<RdData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<RdResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/rd',
        ...options
    });
};

/**
 * Generate Apikey
 */
export const generateapikey = <ThrowOnError extends boolean = false>(options?: Options<GenerateapikeyData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<GenerateapikeyResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/generateapikey',
        ...options
    });
};

/**
 * Get Services
 */
export const services = <ThrowOnError extends boolean = false>(options?: Options<ServicesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ServicesResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/services',
        ...options
    });
};

/**
 * Initiate Trakt Oauth
 */
export const traktOauthInitiate = <ThrowOnError extends boolean = false>(options?: Options<TraktOauthInitiateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<TraktOauthInitiateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/trakt/oauth/initiate',
        ...options
    });
};

/**
 * Trakt Oauth Callback
 */
export const traktOauthCallback = <ThrowOnError extends boolean = false>(options: Options<TraktOauthCallbackData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TraktOauthCallbackResponse, TraktOauthCallbackError, ThrowOnError>({
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/trakt/oauth/callback',
        ...options
    });
};

/**
 * Get Stats
 */
export const stats = <ThrowOnError extends boolean = false>(options?: Options<StatsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<StatsResponse2, unknown, ThrowOnError>({
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/stats',
        ...options
    });
};

/**
 * Get Logs
 */
export const logs = <ThrowOnError extends boolean = false>(options?: Options<LogsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<LogsResponse2, unknown, ThrowOnError>({
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/logs',
        ...options
    });
};

/**
 * Get Events
 */
export const events = <ThrowOnError extends boolean = false>(options?: Options<EventsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<EventsResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/events',
        ...options
    });
};

/**
 * Get Rclone Files
 * Get all files in the rclone mount.
 */
export const mount = <ThrowOnError extends boolean = false>(options?: Options<MountData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MountResponse2, unknown, ThrowOnError>({
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/mount',
        ...options
    });
};

/**
 * Upload Logs
 * Upload the latest log file to paste.c-net.org
 */
export const uploadLogs = <ThrowOnError extends boolean = false>(options?: Options<UploadLogsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<UploadLogsResponse2, unknown, ThrowOnError>({
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/upload_logs',
        ...options
    });
};

/**
 * Fetch Calendar
 * Fetch the calendar of all the items in the library
 */
export const fetchCalendar = <ThrowOnError extends boolean = false>(options?: Options<FetchCalendarData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<FetchCalendarResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/calendar',
        ...options
    });
};

/**
 * Get States
 */
export const getStates = <ThrowOnError extends boolean = false>(options?: Options<GetStatesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetStatesResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/items/states',
        ...options
    });
};

/**
 * Retrieve Media Items
 * Fetch media items with optional filters and pagination
 */
export const getItems = <ThrowOnError extends boolean = false>(options?: Options<GetItemsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetItemsResponse, GetItemsError, ThrowOnError>({
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/items',
        ...options
    });
};

/**
 * Add Media Items
 * Add media items with bases on imdb IDs
 */
export const addItems = <ThrowOnError extends boolean = false>(options?: Options<AddItemsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<AddItemsResponse, AddItemsError, ThrowOnError>({
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/items/add',
        ...options
    });
};

/**
 * Retrieve Media Item
 * Fetch a single media item by ID
 */
export const getItem = <ThrowOnError extends boolean = false>(options: Options<GetItemData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetItemResponse, GetItemError, ThrowOnError>({
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/items/{id}',
        ...options
    });
};

/**
 * Retrieve Media Items By IMDb IDs
 * Fetch media items by IMDb IDs
 */
export const getItemsByImdbIds = <ThrowOnError extends boolean = false>(options: Options<GetItemsByImdbIdsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetItemsByImdbIdsResponse, GetItemsByImdbIdsError, ThrowOnError>({
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/items/imdb/{imdb_ids}',
        ...options
    });
};

/**
 * Reset Media Items
 * Reset media items with bases on item IDs
 */
export const resetItems = <ThrowOnError extends boolean = false>(options: Options<ResetItemsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ResetItemsResponse, ResetItemsError, ThrowOnError>({
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/items/reset',
        ...options
    });
};

/**
 * Retry Media Items
 * Retry media items with bases on item IDs
 */
export const retryItems = <ThrowOnError extends boolean = false>(options: Options<RetryItemsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RetryItemsResponse, RetryItemsError, ThrowOnError>({
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/items/retry',
        ...options
    });
};

/**
 * Retry Library Items
 * Retry items in the library that failed to download
 */
export const retryLibraryItems = <ThrowOnError extends boolean = false>(options?: Options<RetryLibraryItemsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<RetryLibraryItemsResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/items/retry_library',
        ...options
    });
};

/**
 * Update Ongoing Items
 * Update state for ongoing and unreleased items
 */
export const updateOngoingItems = <ThrowOnError extends boolean = false>(options?: Options<UpdateOngoingItemsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<UpdateOngoingItemsResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/items/update_ongoing',
        ...options
    });
};

/**
 * Repair Broken Symlinks
 * Repair broken symlinks in the library. Optionally, provide a directory path to only scan that directory.
 */
export const repairSymlinks = <ThrowOnError extends boolean = false>(options?: Options<RepairSymlinksData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<RepairSymlinksResponse2, RepairSymlinksError, ThrowOnError>({
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/items/repair_symlinks',
        ...options
    });
};

/**
 * Remove Media Items
 * Remove media items based on item IDs
 */
export const removeItem = <ThrowOnError extends boolean = false>(options: Options<RemoveItemData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RemoveItemResponse, RemoveItemError, ThrowOnError>({
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/items/remove',
        ...options
    });
};

/**
 * Get Item Streams
 */
export const getItemStreamsApiV1ItemsItemIdStreamsGet = <ThrowOnError extends boolean = false>(options: Options<GetItemStreamsApiV1ItemsItemIdStreamsGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, GetItemStreamsApiV1ItemsItemIdStreamsGetError, ThrowOnError>({
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/items/{item_id}/streams',
        ...options
    });
};

/**
 * Blacklist Stream
 */
export const blacklistStreamApiV1ItemsItemIdStreamsStreamIdBlacklistPost = <ThrowOnError extends boolean = false>(options: Options<BlacklistStreamApiV1ItemsItemIdStreamsStreamIdBlacklistPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, BlacklistStreamApiV1ItemsItemIdStreamsStreamIdBlacklistPostError, ThrowOnError>({
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/items/{item_id}/streams/{stream_id}/blacklist',
        ...options
    });
};

/**
 * Unblacklist Stream
 */
export const unblacklistStreamApiV1ItemsItemIdStreamsStreamIdUnblacklistPost = <ThrowOnError extends boolean = false>(options: Options<UnblacklistStreamApiV1ItemsItemIdStreamsStreamIdUnblacklistPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, UnblacklistStreamApiV1ItemsItemIdStreamsStreamIdUnblacklistPostError, ThrowOnError>({
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/items/{item_id}/streams/{stream_id}/unblacklist',
        ...options
    });
};

/**
 * Reset Media Item Streams
 * Reset all streams for a media item
 */
export const resetItemStreams = <ThrowOnError extends boolean = false>(options: Options<ResetItemStreamsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, ResetItemStreamsError, ThrowOnError>({
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/items/{item_id}/streams/reset',
        ...options
    });
};

/**
 * Pause Media Items
 * Pause media items based on item IDs
 */
export const pauseItems = <ThrowOnError extends boolean = false>(options: Options<PauseItemsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PauseItemsResponse, PauseItemsError, ThrowOnError>({
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/items/pause',
        ...options
    });
};

/**
 * Unpause Media Items
 * Unpause media items based on item IDs
 */
export const unpauseItems = <ThrowOnError extends boolean = false>(options: Options<UnpauseItemsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UnpauseItemsResponse, UnpauseItemsError, ThrowOnError>({
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/items/unpause',
        ...options
    });
};

/**
 * Parse Media File
 * Parse a media file
 */
export const ffprobeMediaFiles = <ThrowOnError extends boolean = false>(options: Options<FfprobeMediaFilesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<FfprobeMediaFilesResponse, FfprobeMediaFilesError, ThrowOnError>({
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/items/ffprobe',
        ...options
    });
};

/**
 * Get streams for an item
 * Get streams for an item
 */
export const scrapeItem = <ThrowOnError extends boolean = false>(options: Options<ScrapeItemData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ScrapeItemResponse2, ScrapeItemError, ThrowOnError>({
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/scrape/scrape/{id}',
        ...options
    });
};

/**
 * Start a manual scraping session
 */
export const startManualSession = <ThrowOnError extends boolean = false>(options: Options<StartManualSessionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<StartManualSessionResponse, StartManualSessionError, ThrowOnError>({
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/scrape/scrape/start_session',
        ...options
    });
};

/**
 * Select files for torrent id, for this to be instant it requires files to be one of /manual/instant_availability response containers
 */
export const manualSelect = <ThrowOnError extends boolean = false>(options: Options<ManualSelectData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ManualSelectResponse, ManualSelectError, ThrowOnError>({
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/scrape/scrape/select_files/{session_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Match container files to item
 */
export const manualUpdateAttributes = <ThrowOnError extends boolean = false>(options: Options<ManualUpdateAttributesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ManualUpdateAttributesResponse, ManualUpdateAttributesError, ThrowOnError>({
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/scrape/scrape/update_attributes/{session_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Abort a manual scraping session
 */
export const abortManualSession = <ThrowOnError extends boolean = false>(options: Options<AbortManualSessionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AbortManualSessionResponse, AbortManualSessionError, ThrowOnError>({
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/scrape/scrape/abort_session/{session_id}',
        ...options
    });
};

/**
 * Complete a manual scraping session
 */
export const completeManualSession = <ThrowOnError extends boolean = false>(options: Options<CompleteManualSessionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CompleteManualSessionResponse, CompleteManualSessionError, ThrowOnError>({
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/scrape/scrape/complete_session/{session_id}',
        ...options
    });
};

/**
 * Parse an array of torrent titles
 */
export const parseTorrentTitles = <ThrowOnError extends boolean = false>(options: Options<ParseTorrentTitlesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ParseTorrentTitlesResponse, ParseTorrentTitlesError, ThrowOnError>({
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/scrape/parse',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get Settings Schema
 * Get the JSON schema for the settings.
 */
export const getSettingsSchema = <ThrowOnError extends boolean = false>(options?: Options<GetSettingsSchemaData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetSettingsSchemaResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/settings/schema',
        ...options
    });
};

/**
 * Load Settings
 */
export const loadSettings = <ThrowOnError extends boolean = false>(options?: Options<LoadSettingsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<LoadSettingsResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/settings/load',
        ...options
    });
};

/**
 * Save Settings
 */
export const saveSettings = <ThrowOnError extends boolean = false>(options?: Options<SaveSettingsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<SaveSettingsResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/settings/save',
        ...options
    });
};

/**
 * Get All Settings
 */
export const getAllSettings = <ThrowOnError extends boolean = false>(options?: Options<GetAllSettingsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllSettingsResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/settings/get/all',
        ...options
    });
};

/**
 * Get Settings
 */
export const getSettings = <ThrowOnError extends boolean = false>(options: Options<GetSettingsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSettingsResponse, GetSettingsError, ThrowOnError>({
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/settings/get/{paths}',
        ...options
    });
};

/**
 * Set All Settings
 */
export const setAllSettings = <ThrowOnError extends boolean = false>(options: Options<SetAllSettingsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SetAllSettingsResponse, SetAllSettingsError, ThrowOnError>({
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/settings/set/all',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Set Settings
 */
export const setSettings = <ThrowOnError extends boolean = false>(options: Options<SetSettingsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SetSettingsResponse, SetSettingsError, ThrowOnError>({
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/settings/set',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Overseerr
 * Webhook for Overseerr
 */
export const overseerrApiV1WebhookOverseerrPost = <ThrowOnError extends boolean = false>(options?: Options<OverseerrApiV1WebhookOverseerrPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<OverseerrApiV1WebhookOverseerrPostResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/webhook/overseerr',
        ...options
    });
};

/**
 * Get Event Types
 */
export const getEventTypesApiV1StreamEventTypesGet = <ThrowOnError extends boolean = false>(options?: Options<GetEventTypesApiV1StreamEventTypesGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/stream/event_types',
        ...options
    });
};

/**
 * Stream Events
 */
export const streamEventsApiV1StreamEventTypeGet = <ThrowOnError extends boolean = false>(options: Options<StreamEventsApiV1StreamEventTypeGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<StreamEventsApiV1StreamEventTypeGetResponse, StreamEventsApiV1StreamEventTypeGetError, ThrowOnError>({
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/stream/{event_type}',
        ...options
    });
};