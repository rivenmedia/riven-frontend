// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options } from '@hey-api/client-fetch';
import type { RootError, RootResponse2, HealthError, HealthResponse, RdError, RdResponse, GenerateapikeyError, GenerateapikeyResponse, TorboxError, TorboxResponse, ServicesError, ServicesResponse, TraktOauthInitiateError, TraktOauthInitiateResponse, TraktOauthCallbackData, TraktOauthCallbackError, TraktOauthCallbackResponse, StatsError, StatsResponse2, LogsError, LogsResponse, EventsError, EventsResponse, MountError, MountResponse, UploadLogsError, UploadLogsResponse2, OverseerrApiV1WebhookOverseerrPostError, OverseerrApiV1WebhookOverseerrPostResponse, GetStatesError, GetStatesResponse, GetItemsData, GetItemsError, GetItemsResponse, AddItemsData, AddItemsError, AddItemsResponse, GetItemData, GetItemError, GetItemResponse, GetItemsByImdbIdsData, GetItemsByImdbIdsError, GetItemsByImdbIdsResponse, ResetItemsData, ResetItemsError, ResetItemsResponse, RetryItemsData, RetryItemsError, RetryItemsResponse, RemoveItemData, RemoveItemError, RemoveItemResponse, GetItemStreamsApiV1ItemsItemIdStreamsGetData, GetItemStreamsApiV1ItemsItemIdStreamsGetError, GetItemStreamsApiV1ItemsItemIdStreamsGetResponse, BlacklistStreamApiV1ItemsItemIdStreamsStreamIdBlacklistPostData, BlacklistStreamApiV1ItemsItemIdStreamsStreamIdBlacklistPostError, BlacklistStreamApiV1ItemsItemIdStreamsStreamIdBlacklistPostResponse, UnblacklistStreamApiV1ItemsItemIdStreamsStreamIdUnblacklistPostData, UnblacklistStreamApiV1ItemsItemIdStreamsStreamIdUnblacklistPostError, UnblacklistStreamApiV1ItemsItemIdStreamsStreamIdUnblacklistPostResponse, ScrapeItemData, ScrapeItemError, ScrapeItemResponse2, StartManualSessionApiV1ScrapeScrapeStartSessionPostData, StartManualSessionApiV1ScrapeScrapeStartSessionPostError, StartManualSessionApiV1ScrapeScrapeStartSessionPostResponse, ManualSelectData, ManualSelectError, ManualSelectResponse, ManualUpdateAttributesData, ManualUpdateAttributesError, ManualUpdateAttributesResponse, AbortManualSessionApiV1ScrapeScrapeAbortSessionSessionIdPostData, AbortManualSessionApiV1ScrapeScrapeAbortSessionSessionIdPostError, AbortManualSessionApiV1ScrapeScrapeAbortSessionSessionIdPostResponse, CompleteManualSessionData, CompleteManualSessionError, CompleteManualSessionResponse, GetSettingsSchemaError, GetSettingsSchemaResponse, LoadSettingsError, LoadSettingsResponse, SaveSettingsError, SaveSettingsResponse, GetAllSettingsError, GetAllSettingsResponse, GetSettingsData, GetSettingsError, GetSettingsResponse, SetAllSettingsData, SetAllSettingsError, SetAllSettingsResponse, SetSettingsData, SetSettingsError, SetSettingsResponse, GetEventTypesApiV1StreamEventTypesGetError, GetEventTypesApiV1StreamEventTypesGetResponse, StreamEventsApiV1StreamEventTypeGetData, StreamEventsApiV1StreamEventTypeGetError, StreamEventsApiV1StreamEventTypeGetResponse } from './types.gen';

export const client = createClient(createConfig());

export class DefaultService {
    /**
     * Root
     */
    public static root<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<RootResponse2, RootError, ThrowOnError>({
            ...options,
            url: '/api/v1/'
        });
    }
    
    /**
     * Health
     */
    public static health<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<HealthResponse, HealthError, ThrowOnError>({
            ...options,
            url: '/api/v1/health'
        });
    }
    
    /**
     * Get Rd User
     */
    public static rd<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<RdResponse, RdError, ThrowOnError>({
            ...options,
            url: '/api/v1/rd'
        });
    }
    
    /**
     * Generate Apikey
     */
    public static generateapikey<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).post<GenerateapikeyResponse, GenerateapikeyError, ThrowOnError>({
            ...options,
            url: '/api/v1/generateapikey'
        });
    }
    
    /**
     * Get Torbox User
     */
    public static torbox<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<TorboxResponse, TorboxError, ThrowOnError>({
            ...options,
            url: '/api/v1/torbox'
        });
    }
    
    /**
     * Get Services
     */
    public static services<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<ServicesResponse, ServicesError, ThrowOnError>({
            ...options,
            url: '/api/v1/services'
        });
    }
    
    /**
     * Initiate Trakt Oauth
     */
    public static traktOauthInitiate<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<TraktOauthInitiateResponse, TraktOauthInitiateError, ThrowOnError>({
            ...options,
            url: '/api/v1/trakt/oauth/initiate'
        });
    }
    
    /**
     * Trakt Oauth Callback
     */
    public static traktOauthCallback<ThrowOnError extends boolean = false>(options: Options<TraktOauthCallbackData, ThrowOnError>) {
        return (options?.client ?? client).get<TraktOauthCallbackResponse, TraktOauthCallbackError, ThrowOnError>({
            ...options,
            url: '/api/v1/trakt/oauth/callback'
        });
    }
    
    /**
     * Get Stats
     */
    public static stats<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<StatsResponse2, StatsError, ThrowOnError>({
            ...options,
            url: '/api/v1/stats'
        });
    }
    
    /**
     * Get Logs
     */
    public static logs<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<LogsResponse, LogsError, ThrowOnError>({
            ...options,
            url: '/api/v1/logs'
        });
    }
    
    /**
     * Get Events
     */
    public static events<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<EventsResponse, EventsError, ThrowOnError>({
            ...options,
            url: '/api/v1/events'
        });
    }
    
    /**
     * Get Rclone Files
     * Get all files in the rclone mount.
     */
    public static mount<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<MountResponse, MountError, ThrowOnError>({
            ...options,
            url: '/api/v1/mount'
        });
    }
    
    /**
     * Upload Logs
     * Upload the latest log file to paste.c-net.org
     */
    public static uploadLogs<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).post<UploadLogsResponse2, UploadLogsError, ThrowOnError>({
            ...options,
            url: '/api/v1/upload_logs'
        });
    }
    
    /**
     * Overseerr
     * Webhook for Overseerr
     */
    public static overseerrApiV1WebhookOverseerrPost<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).post<OverseerrApiV1WebhookOverseerrPostResponse, OverseerrApiV1WebhookOverseerrPostError, ThrowOnError>({
            ...options,
            url: '/api/v1/webhook/overseerr'
        });
    }
    
}

export class ItemsService {
    /**
     * Get States
     */
    public static getStates<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<GetStatesResponse, GetStatesError, ThrowOnError>({
            ...options,
            url: '/api/v1/items/states'
        });
    }
    
    /**
     * Retrieve Media Items
     * Fetch media items with optional filters and pagination
     */
    public static getItems<ThrowOnError extends boolean = false>(options?: Options<GetItemsData, ThrowOnError>) {
        return (options?.client ?? client).get<GetItemsResponse, GetItemsError, ThrowOnError>({
            ...options,
            url: '/api/v1/items'
        });
    }
    
    /**
     * Add Media Items
     * Add media items with bases on imdb IDs
     */
    public static addItems<ThrowOnError extends boolean = false>(options?: Options<AddItemsData, ThrowOnError>) {
        return (options?.client ?? client).post<AddItemsResponse, AddItemsError, ThrowOnError>({
            ...options,
            url: '/api/v1/items/add'
        });
    }
    
    /**
     * Retrieve Media Item
     * Fetch a single media item by ID
     */
    public static getItem<ThrowOnError extends boolean = false>(options: Options<GetItemData, ThrowOnError>) {
        return (options?.client ?? client).get<GetItemResponse, GetItemError, ThrowOnError>({
            ...options,
            url: '/api/v1/items/{id}'
        });
    }
    
    /**
     * Retrieve Media Items By IMDb IDs
     * Fetch media items by IMDb IDs
     */
    public static getItemsByImdbIds<ThrowOnError extends boolean = false>(options: Options<GetItemsByImdbIdsData, ThrowOnError>) {
        return (options?.client ?? client).get<GetItemsByImdbIdsResponse, GetItemsByImdbIdsError, ThrowOnError>({
            ...options,
            url: '/api/v1/items/{imdb_ids}'
        });
    }
    
    /**
     * Reset Media Items
     * Reset media items with bases on item IDs
     */
    public static resetItems<ThrowOnError extends boolean = false>(options: Options<ResetItemsData, ThrowOnError>) {
        return (options?.client ?? client).post<ResetItemsResponse, ResetItemsError, ThrowOnError>({
            ...options,
            url: '/api/v1/items/reset'
        });
    }
    
    /**
     * Retry Media Items
     * Retry media items with bases on item IDs
     */
    public static retryItems<ThrowOnError extends boolean = false>(options: Options<RetryItemsData, ThrowOnError>) {
        return (options?.client ?? client).post<RetryItemsResponse, RetryItemsError, ThrowOnError>({
            ...options,
            url: '/api/v1/items/retry'
        });
    }
    
    /**
     * Remove Media Items
     * Remove media items based on item IDs
     */
    public static removeItem<ThrowOnError extends boolean = false>(options: Options<RemoveItemData, ThrowOnError>) {
        return (options?.client ?? client).delete<RemoveItemResponse, RemoveItemError, ThrowOnError>({
            ...options,
            url: '/api/v1/items/remove'
        });
    }
    
    /**
     * Get Item Streams
     */
    public static getItemStreamsApiV1ItemsItemIdStreamsGet<ThrowOnError extends boolean = false>(options: Options<GetItemStreamsApiV1ItemsItemIdStreamsGetData, ThrowOnError>) {
        return (options?.client ?? client).get<GetItemStreamsApiV1ItemsItemIdStreamsGetResponse, GetItemStreamsApiV1ItemsItemIdStreamsGetError, ThrowOnError>({
            ...options,
            url: '/api/v1/items/{item_id}/streams'
        });
    }
    
    /**
     * Blacklist Stream
     */
    public static blacklistStreamApiV1ItemsItemIdStreamsStreamIdBlacklistPost<ThrowOnError extends boolean = false>(options: Options<BlacklistStreamApiV1ItemsItemIdStreamsStreamIdBlacklistPostData, ThrowOnError>) {
        return (options?.client ?? client).post<BlacklistStreamApiV1ItemsItemIdStreamsStreamIdBlacklistPostResponse, BlacklistStreamApiV1ItemsItemIdStreamsStreamIdBlacklistPostError, ThrowOnError>({
            ...options,
            url: '/api/v1/items/{item_id}/streams/{stream_id}/blacklist'
        });
    }
    
    /**
     * Unblacklist Stream
     */
    public static unblacklistStreamApiV1ItemsItemIdStreamsStreamIdUnblacklistPost<ThrowOnError extends boolean = false>(options: Options<UnblacklistStreamApiV1ItemsItemIdStreamsStreamIdUnblacklistPostData, ThrowOnError>) {
        return (options?.client ?? client).post<UnblacklistStreamApiV1ItemsItemIdStreamsStreamIdUnblacklistPostResponse, UnblacklistStreamApiV1ItemsItemIdStreamsStreamIdUnblacklistPostError, ThrowOnError>({
            ...options,
            url: '/api/v1/items{item_id}/streams/{stream_id}/unblacklist'
        });
    }
    
}

export class ScrapeService {
    /**
     * Get streams for an item
     */
    public static scrapeItem<ThrowOnError extends boolean = false>(options: Options<ScrapeItemData, ThrowOnError>) {
        return (options?.client ?? client).get<ScrapeItemResponse2, ScrapeItemError, ThrowOnError>({
            ...options,
            url: '/api/v1/scrape/scrape/{id}'
        });
    }
    
    /**
     * Start Manual Session
     */
    public static startManualSessionApiV1ScrapeScrapeStartSessionPost<ThrowOnError extends boolean = false>(options: Options<StartManualSessionApiV1ScrapeScrapeStartSessionPostData, ThrowOnError>) {
        return (options?.client ?? client).post<StartManualSessionApiV1ScrapeScrapeStartSessionPostResponse, StartManualSessionApiV1ScrapeScrapeStartSessionPostError, ThrowOnError>({
            ...options,
            url: '/api/v1/scrape/scrape/start_session'
        });
    }
    
    /**
     * Select files for torrent id, for this to be instant it requires files to be one of /manual/instant_availability response containers
     */
    public static manualSelect<ThrowOnError extends boolean = false>(options: Options<ManualSelectData, ThrowOnError>) {
        return (options?.client ?? client).post<ManualSelectResponse, ManualSelectError, ThrowOnError>({
            ...options,
            url: '/api/v1/scrape/scrape/select_files/{session_id}'
        });
    }
    
    /**
     * Match container files to item
     */
    public static manualUpdateAttributes<ThrowOnError extends boolean = false>(options: Options<ManualUpdateAttributesData, ThrowOnError>) {
        return (options?.client ?? client).post<ManualUpdateAttributesResponse, ManualUpdateAttributesError, ThrowOnError>({
            ...options,
            url: '/api/v1/scrape/scrape/update_attributes/{session_id}'
        });
    }
    
    /**
     * Abort Manual Session
     */
    public static abortManualSessionApiV1ScrapeScrapeAbortSessionSessionIdPost<ThrowOnError extends boolean = false>(options: Options<AbortManualSessionApiV1ScrapeScrapeAbortSessionSessionIdPostData, ThrowOnError>) {
        return (options?.client ?? client).post<AbortManualSessionApiV1ScrapeScrapeAbortSessionSessionIdPostResponse, AbortManualSessionApiV1ScrapeScrapeAbortSessionSessionIdPostError, ThrowOnError>({
            ...options,
            url: '/api/v1/scrape/scrape/abort_session/{session_id}'
        });
    }
    
    /**
     * Complete a manual scraping session
     */
    public static completeManualSession<ThrowOnError extends boolean = false>(options: Options<CompleteManualSessionData, ThrowOnError>) {
        return (options?.client ?? client).post<CompleteManualSessionResponse, CompleteManualSessionError, ThrowOnError>({
            ...options,
            url: '/api/v1/scrape/scrape/complete_session/{session_id}'
        });
    }
    
}

export class SettingsService {
    /**
     * Get Settings Schema
     * Get the JSON schema for the settings.
     */
    public static getSettingsSchema<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<GetSettingsSchemaResponse, GetSettingsSchemaError, ThrowOnError>({
            ...options,
            url: '/api/v1/settings/schema'
        });
    }
    
    /**
     * Load Settings
     */
    public static loadSettings<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<LoadSettingsResponse, LoadSettingsError, ThrowOnError>({
            ...options,
            url: '/api/v1/settings/load'
        });
    }
    
    /**
     * Save Settings
     */
    public static saveSettings<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).post<SaveSettingsResponse, SaveSettingsError, ThrowOnError>({
            ...options,
            url: '/api/v1/settings/save'
        });
    }
    
    /**
     * Get All Settings
     */
    public static getAllSettings<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<GetAllSettingsResponse, GetAllSettingsError, ThrowOnError>({
            ...options,
            url: '/api/v1/settings/get/all'
        });
    }
    
    /**
     * Get Settings
     */
    public static getSettings<ThrowOnError extends boolean = false>(options: Options<GetSettingsData, ThrowOnError>) {
        return (options?.client ?? client).get<GetSettingsResponse, GetSettingsError, ThrowOnError>({
            ...options,
            url: '/api/v1/settings/get/{paths}'
        });
    }
    
    /**
     * Set All Settings
     */
    public static setAllSettings<ThrowOnError extends boolean = false>(options: Options<SetAllSettingsData, ThrowOnError>) {
        return (options?.client ?? client).post<SetAllSettingsResponse, SetAllSettingsError, ThrowOnError>({
            ...options,
            url: '/api/v1/settings/set/all'
        });
    }
    
    /**
     * Set Settings
     */
    public static setSettings<ThrowOnError extends boolean = false>(options: Options<SetSettingsData, ThrowOnError>) {
        return (options?.client ?? client).post<SetSettingsResponse, SetSettingsError, ThrowOnError>({
            ...options,
            url: '/api/v1/settings/set'
        });
    }
    
}

export class StreamService {
    /**
     * Get Event Types
     */
    public static getEventTypesApiV1StreamEventTypesGet<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<GetEventTypesApiV1StreamEventTypesGetResponse, GetEventTypesApiV1StreamEventTypesGetError, ThrowOnError>({
            ...options,
            url: '/api/v1/stream/event_types'
        });
    }
    
    /**
     * Stream Events
     */
    public static streamEventsApiV1StreamEventTypeGet<ThrowOnError extends boolean = false>(options: Options<StreamEventsApiV1StreamEventTypeGetData, ThrowOnError>) {
        return (options?.client ?? client).get<StreamEventsApiV1StreamEventTypeGetResponse, StreamEventsApiV1StreamEventTypeGetError, ThrowOnError>({
            ...options,
            url: '/api/v1/stream/{event_type}'
        });
    }
    
}