// This file is auto-generated by @hey-api/openapi-ts

import { z } from 'zod/v3';

/**
 * LibraryProfileFilterRules
 * Filter rules for library profile matching (metadata-only)
 */
export const zLibraryProfileFilterRules = z.object({
    content_types: z.union([
        z.array(z.string()),
        z.null()
    ]).optional(),
    genres: z.union([
        z.array(z.string()),
        z.null()
    ]).optional(),
    exclude_genres: z.union([
        z.array(z.string()),
        z.null()
    ]).optional(),
    min_year: z.union([
        z.number().int().gte(1900),
        z.null()
    ]).optional(),
    max_year: z.union([
        z.number().int().gte(1900),
        z.null()
    ]).optional(),
    is_anime: z.union([
        z.boolean(),
        z.null()
    ]).optional(),
    networks: z.union([
        z.array(z.string()),
        z.null()
    ]).optional(),
    countries: z.union([
        z.array(z.string()),
        z.null()
    ]).optional(),
    languages: z.union([
        z.array(z.string()),
        z.null()
    ]).optional(),
    min_rating: z.union([
        z.number().gte(0).lte(10),
        z.null()
    ]).optional(),
    max_rating: z.union([
        z.number().gte(0).lte(10),
        z.null()
    ]).optional(),
    content_ratings: z.union([
        z.array(z.string()),
        z.null()
    ]).optional()
}).describe('Filter rules for library profile matching (metadata-only)');

export type LibraryProfileFilterRulesZodType = z.infer<typeof zLibraryProfileFilterRules>;

/**
 * LibraryProfile
 * Library profile configuration for organizing media into different libraries
 */
export const zLibraryProfile = z.object({
    name: z.string().describe('Human-readable profile name'),
    library_path: z.string().describe("VFS path prefix for this profile (e.g., '/kids', '/anime')"),
    enabled: z.boolean().describe('Enable this profile').optional().default(true),
    filter_rules: zLibraryProfileFilterRules.optional()
}).describe('Library profile configuration for organizing media into different libraries');

export type LibraryProfileZodType = z.infer<typeof zLibraryProfile>;

/**
 * FilesystemModel
 */
export const zFilesystemModel = z.object({
    mount_path: z.string().describe('Path where Riven will mount the virtual filesystem').optional().default('/path/to/riven/mount'),
    library_profiles: z.record(zLibraryProfile).describe("Library profiles for organizing media into different libraries based on metadata. An example profile is provided (disabled by default) - enable them or create your own. Each profile filters media by metadata (genres, ratings, etc.) and creates VFS paths. Media appears in all matching profile paths. Use '!' prefix in filter lists to exclude values (e.g., genres: ['action', '!horror'] = action movies but not horror).").optional(),
    cache_dir: z.string().describe('Directory for caching downloaded chunks').optional().default('/dev/shm/riven-cache'),
    cache_max_size_mb: z.number().int().gte(0).describe('Maximum cache size in MB (10 GiB default)').optional().default(10240),
    cache_ttl_seconds: z.number().int().describe('Cache time-to-live in seconds (2 hours default)').optional().default(7200),
    cache_eviction: z.enum([
        'LRU',
        'TTL'
    ]).describe('Cache eviction policy (LRU or TTL)').optional(),
    cache_metrics: z.boolean().describe('Enable cache metrics logging').optional().default(true),
    chunk_size_mb: z.number().int().gte(1).describe('Size of a single fetch chunk in MB').optional().default(8),
    fetch_ahead_chunks: z.number().int().gte(0).describe('Number of chunks to fetch ahead when streaming').optional().default(4)
});

export type FilesystemModelZodType = z.infer<typeof zFilesystemModel>;

/**
 * PlexLibraryModel
 */
export const zPlexLibraryModel = z.object({
    enabled: z.boolean().describe('Enable Plex library updates').optional().default(false),
    token: z.string().describe('Plex authentication token').optional().default(''),
    url: z.string().describe('Plex server URL').optional().default('http://localhost:32400')
});

export type PlexLibraryModelZodType = z.infer<typeof zPlexLibraryModel>;

/**
 * JellyfinLibraryModel
 */
export const zJellyfinLibraryModel = z.object({
    enabled: z.boolean().describe('Enable Jellyfin library updates').optional().default(false),
    api_key: z.string().describe('Jellyfin API key').optional().default(''),
    url: z.string().describe('Jellyfin server URL').optional().default('http://localhost:8096')
});

export type JellyfinLibraryModelZodType = z.infer<typeof zJellyfinLibraryModel>;

/**
 * EmbyLibraryModel
 */
export const zEmbyLibraryModel = z.object({
    enabled: z.boolean().describe('Enable Emby library updates').optional().default(false),
    api_key: z.string().describe('Emby API key').optional().default(''),
    url: z.string().describe('Emby server URL').optional().default('http://localhost:8096')
});

export type EmbyLibraryModelZodType = z.infer<typeof zEmbyLibraryModel>;

/**
 * UpdatersModel
 */
export const zUpdatersModel = z.object({
    updater_interval: z.number().int().gte(1).describe('Interval in seconds between library updates').optional().default(120),
    library_path: z.string().describe('Path to which your media library mount point').optional().default('/path/to/library/mount'),
    plex: zPlexLibraryModel.optional(),
    jellyfin: zJellyfinLibraryModel.optional(),
    emby: zEmbyLibraryModel.optional()
});

export type UpdatersModelZodType = z.infer<typeof zUpdatersModel>;

/**
 * RealDebridModel
 */
export const zRealDebridModel = z.object({
    enabled: z.boolean().describe('Enable Real-Debrid').optional().default(false),
    api_key: z.string().describe('Real-Debrid API key').optional().default('')
});

export type RealDebridModelZodType = z.infer<typeof zRealDebridModel>;

/**
 * TorBoxModel
 */
export const zTorBoxModel = z.object({
    enabled: z.boolean().describe('Enable TorBox').optional().default(false),
    api_key: z.string().describe('TorBox API key').optional().default('')
});

export type TorBoxModelZodType = z.infer<typeof zTorBoxModel>;

/**
 * DownloadersModel
 */
export const zDownloadersModel = z.object({
    video_extensions: z.array(z.string()).describe('List of video file extensions to consider for downloads').optional(),
    movie_filesize_mb_min: z.number().int().gte(1).describe('Minimum file size in MB for movies').optional().default(700),
    movie_filesize_mb_max: z.number().int().gte(-1).describe('Maximum file size in MB for movies (-1 for no limit)').optional().default(-1),
    episode_filesize_mb_min: z.number().int().gte(1).describe('Minimum file size in MB for episodes').optional().default(100),
    episode_filesize_mb_max: z.number().int().gte(-1).describe('Maximum file size in MB for episodes (-1 for no limit)').optional().default(-1),
    proxy_url: z.string().describe('Proxy URL for downloaders (optional)').optional().default(''),
    real_debrid: zRealDebridModel.optional(),
    torbox: zTorBoxModel.optional()
});

export type DownloadersModelZodType = z.infer<typeof zDownloadersModel>;

/**
 * OverseerrModel
 */
export const zOverseerrModel = z.object({
    update_interval: z.number().int().gte(1).describe('Update interval in seconds').optional().default(60),
    enabled: z.boolean().describe('Enable Overseerr integration').optional().default(false),
    url: z.string().describe('Overseerr URL').optional().default('http://localhost:5055'),
    api_key: z.string().describe('Overseerr API key').optional().default(''),
    use_webhook: z.boolean().describe('Use webhook instead of polling').optional().default(false)
});

export type OverseerrModelZodType = z.infer<typeof zOverseerrModel>;

/**
 * PlexWatchlistModel
 */
export const zPlexWatchlistModel = z.object({
    update_interval: z.number().int().gte(1).describe('Update interval in seconds').optional().default(60),
    enabled: z.boolean().describe('Enable Plex Watchlist integration').optional().default(false),
    rss: z.array(z.string()).describe('Plex Watchlist RSS feed URLs').optional()
});

export type PlexWatchlistModelZodType = z.infer<typeof zPlexWatchlistModel>;

/**
 * MdblistModel
 */
export const zMdblistModel = z.object({
    update_interval: z.number().int().gte(1).describe('Update interval in seconds (24 hours default)').optional().default(86400),
    enabled: z.boolean().describe('Enable MDBList integration').optional().default(false),
    api_key: z.string().describe('MDBList API key').optional().default(''),
    lists: z.array(z.union([
        z.string(),
        z.number().int()
    ])).describe('MDBList list IDs to monitor').optional()
});

export type MdblistModelZodType = z.infer<typeof zMdblistModel>;

/**
 * ListrrModel
 */
export const zListrrModel = z.object({
    update_interval: z.number().int().gte(1).describe('Update interval in seconds (24 hours default)').optional().default(86400),
    enabled: z.boolean().describe('Enable Listrr integration').optional().default(false),
    movie_lists: z.array(z.string()).describe('Listrr movie list IDs').optional(),
    show_lists: z.array(z.string()).describe('Listrr TV show list IDs').optional(),
    api_key: z.string().describe('Listrr API key').optional().default('')
});

export type ListrrModelZodType = z.infer<typeof zListrrModel>;

/**
 * TraktOauthModel
 */
export const zTraktOauthModel = z.object({
    oauth_client_id: z.string().describe('Trakt OAuth client ID').optional().default(''),
    oauth_client_secret: z.string().describe('Trakt OAuth client secret').optional().default(''),
    oauth_redirect_uri: z.string().describe('Trakt OAuth redirect URI').optional().default(''),
    access_token: z.string().describe('Trakt OAuth access token').optional().default(''),
    refresh_token: z.string().describe('Trakt OAuth refresh token').optional().default('')
});

export type TraktOauthModelZodType = z.infer<typeof zTraktOauthModel>;

/**
 * TraktModel
 */
export const zTraktModel = z.object({
    update_interval: z.number().int().gte(1).describe('Update interval in seconds (24 hours default)').optional().default(86400),
    enabled: z.boolean().describe('Enable Trakt integration').optional().default(false),
    api_key: z.string().describe('Trakt API key').optional().default(''),
    watchlist: z.array(z.string()).describe('Trakt usernames for watchlist monitoring').optional(),
    user_lists: z.array(z.string()).describe('Trakt user list URLs to monitor').optional(),
    collection: z.array(z.string()).describe('Trakt usernames for collection monitoring').optional(),
    fetch_trending: z.boolean().describe('Fetch trending content from Trakt').optional().default(false),
    trending_count: z.number().int().gte(1).describe('Number of trending items to fetch').optional().default(10),
    fetch_popular: z.boolean().describe('Fetch popular content from Trakt').optional().default(false),
    popular_count: z.number().int().gte(1).describe('Number of popular items to fetch').optional().default(10),
    fetch_most_watched: z.boolean().describe('Fetch most watched content from Trakt').optional().default(false),
    most_watched_period: z.string().describe('Period for most watched (daily, weekly, monthly, yearly)').optional().default('weekly'),
    most_watched_count: z.number().int().gte(1).describe('Number of most watched items to fetch').optional().default(10),
    oauth: zTraktOauthModel.optional(),
    proxy_url: z.string().describe('Proxy URL for Trakt API requests').optional().default('')
});

export type TraktModelZodType = z.infer<typeof zTraktModel>;

/**
 * ContentModel
 */
export const zContentModel = z.object({
    overseerr: zOverseerrModel.optional(),
    plex_watchlist: zPlexWatchlistModel.optional(),
    mdblist: zMdblistModel.optional(),
    listrr: zListrrModel.optional(),
    trakt: zTraktModel.optional()
});

export type ContentModelZodType = z.infer<typeof zContentModel>;

/**
 * TorrentioConfig
 */
export const zTorrentioConfig = z.object({
    enabled: z.boolean().describe('Enable Torrentio scraper').optional().default(false),
    filter: z.string().describe('Torrentio filter parameters').optional().default('sort=qualitysize%7Cqualityfilter=480p,scr,cam'),
    url: z.string().describe('Torrentio URL').optional().default('http://torrentio.strem.fun'),
    timeout: z.number().int().gte(1).describe('Request timeout in seconds').optional().default(30),
    ratelimit: z.boolean().describe('Enable rate limiting').optional().default(true),
    proxy_url: z.string().describe('Proxy URL for Torrentio requests').optional().default('')
});

export type TorrentioConfigZodType = z.infer<typeof zTorrentioConfig>;

/**
 * JackettConfig
 */
export const zJackettConfig = z.object({
    enabled: z.boolean().describe('Enable Jackett scraper').optional().default(false),
    url: z.string().describe('Jackett URL').optional().default('http://localhost:9117'),
    api_key: z.string().describe('Jackett API key').optional().default(''),
    timeout: z.number().int().gte(1).describe('Request timeout in seconds').optional().default(30),
    ratelimit: z.boolean().describe('Enable rate limiting').optional().default(true)
});

export type JackettConfigZodType = z.infer<typeof zJackettConfig>;

/**
 * ProwlarrConfig
 */
export const zProwlarrConfig = z.object({
    enabled: z.boolean().describe('Enable Prowlarr scraper').optional().default(false),
    url: z.string().describe('Prowlarr URL').optional().default('http://localhost:9696'),
    api_key: z.string().describe('Prowlarr API key').optional().default(''),
    timeout: z.number().int().gte(1).describe('Request timeout in seconds').optional().default(30),
    ratelimit: z.boolean().describe('Enable rate limiting').optional().default(true),
    limiter_seconds: z.number().int().gte(1).describe('Rate limiter cooldown in seconds').optional().default(60)
});

export type ProwlarrConfigZodType = z.infer<typeof zProwlarrConfig>;

/**
 * OrionoidConfigParametersDict
 */
export const zOrionoidConfigParametersDict = z.object({
    video3d: z.boolean().describe('Include 3D video results').optional().default(false),
    videoquality: z.string().describe('Video quality filter').optional().default('sd_hd8k'),
    limitcount: z.number().int().gte(1).describe('Maximum number of results').optional().default(5)
});

export type OrionoidConfigParametersDictZodType = z.infer<typeof zOrionoidConfigParametersDict>;

/**
 * OrionoidConfig
 */
export const zOrionoidConfig = z.object({
    enabled: z.boolean().describe('Enable Orionoid scraper').optional().default(false),
    api_key: z.string().describe('Orionoid API key').optional().default(''),
    cached_results_only: z.boolean().describe('Only return cached/downloadable results').optional().default(false),
    parameters: zOrionoidConfigParametersDict.optional(),
    timeout: z.number().int().gte(1).describe('Request timeout in seconds').optional().default(30),
    ratelimit: z.boolean().describe('Enable rate limiting').optional().default(true)
});

export type OrionoidConfigZodType = z.infer<typeof zOrionoidConfig>;

/**
 * MediafusionConfig
 */
export const zMediafusionConfig = z.object({
    enabled: z.boolean().describe('Enable Mediafusion scraper').optional().default(false),
    url: z.string().describe('Mediafusion URL').optional().default('http://localhost:8000'),
    timeout: z.number().int().gte(1).describe('Request timeout in seconds').optional().default(30),
    ratelimit: z.boolean().describe('Enable rate limiting').optional().default(true)
});

export type MediafusionConfigZodType = z.infer<typeof zMediafusionConfig>;

/**
 * ZileanConfig
 */
export const zZileanConfig = z.object({
    enabled: z.boolean().describe('Enable Zilean scraper').optional().default(false),
    url: z.string().describe('Zilean URL').optional().default('http://localhost:8181'),
    timeout: z.number().int().gte(1).describe('Request timeout in seconds').optional().default(30),
    ratelimit: z.boolean().describe('Enable rate limiting').optional().default(true)
});

export type ZileanConfigZodType = z.infer<typeof zZileanConfig>;

/**
 * CometConfig
 */
export const zCometConfig = z.object({
    enabled: z.boolean().describe('Enable Comet scraper').optional().default(false),
    url: z.string().describe('Comet URL').optional().default('http://localhost:8000'),
    timeout: z.number().int().gte(1).describe('Request timeout in seconds').optional().default(30),
    ratelimit: z.boolean().describe('Enable rate limiting').optional().default(true)
});

export type CometConfigZodType = z.infer<typeof zCometConfig>;

/**
 * RarbgConfig
 */
export const zRarbgConfig = z.object({
    enabled: z.boolean().describe('Enable RARBG scraper').optional().default(false),
    url: z.string().describe('RARBG URL').optional().default('https://therarbg.to'),
    timeout: z.number().int().gte(1).describe('Request timeout in seconds').optional().default(30),
    ratelimit: z.boolean().describe('Enable rate limiting').optional().default(true)
});

export type RarbgConfigZodType = z.infer<typeof zRarbgConfig>;

/**
 * ScraperModel
 */
export const zScraperModel = z.object({
    after_2: z.number().describe('Hours to wait after 2 failed scrapes').optional().default(2),
    after_5: z.number().describe('Hours to wait after 5 failed scrapes').optional().default(6),
    after_10: z.number().describe('Hours to wait after 10 failed scrapes').optional().default(24),
    enable_aliases: z.boolean().describe('Enable title aliases for better matching').optional().default(true),
    bucket_limit: z.number().int().gte(0).lte(20).describe('Maximum results per quality bucket').optional().default(5),
    max_failed_attempts: z.number().int().gte(0).lte(10).describe('Maximum failed scrape attempts before giving up').optional().default(0),
    dubbed_anime_only: z.boolean().describe('Only scrape dubbed anime content').optional().default(false),
    torrentio: zTorrentioConfig.optional(),
    jackett: zJackettConfig.optional(),
    prowlarr: zProwlarrConfig.optional(),
    orionoid: zOrionoidConfig.optional(),
    mediafusion: zMediafusionConfig.optional(),
    zilean: zZileanConfig.optional(),
    comet: zCometConfig.optional(),
    rarbg: zRarbgConfig.optional()
});

export type ScraperModelZodType = z.infer<typeof zScraperModel>;

/**
 * ResolutionConfig
 * Configuration for which resolutions are enabled.
 */
export const zResolutionConfig = z.object({
    r2160p: z.boolean().optional().default(false),
    r1080p: z.boolean().optional().default(true),
    r720p: z.boolean().optional().default(true),
    r480p: z.boolean().optional().default(false),
    r360p: z.boolean().optional().default(false),
    unknown: z.boolean().optional().default(true)
}).describe('Configuration for which resolutions are enabled.');

export type ResolutionConfigZodType = z.infer<typeof zResolutionConfig>;

/**
 * OptionsConfig
 * Configuration for various options.
 */
export const zOptionsConfig = z.object({
    title_similarity: z.number().optional().default(0.85),
    remove_all_trash: z.boolean().optional().default(true),
    remove_ranks_under: z.number().int().optional().default(-10000),
    remove_unknown_languages: z.boolean().optional().default(false),
    allow_english_in_languages: z.boolean().optional().default(true),
    enable_fetch_speed_mode: z.boolean().optional().default(true),
    remove_adult_content: z.boolean().optional().default(true)
}).describe('Configuration for various options.');

export type OptionsConfigZodType = z.infer<typeof zOptionsConfig>;

/**
 * LanguagesConfig
 * Configuration for which languages are enabled.
 */
export const zLanguagesConfig = z.object({
    required: z.array(z.string()).optional().default([]),
    exclude: z.array(z.string()).optional().default([]),
    preferred: z.array(z.string()).optional().default([])
}).describe('Configuration for which languages are enabled.');

export type LanguagesConfigZodType = z.infer<typeof zLanguagesConfig>;

/**
 * CustomRank
 * Custom Ranks used in SettingsModel.
 */
export const zCustomRank = z.object({
    fetch: z.boolean().optional().default(true),
    use_custom_rank: z.boolean().optional().default(false),
    rank: z.number().int().optional().default(0)
}).describe('Custom Ranks used in SettingsModel.');

export type CustomRankZodType = z.infer<typeof zCustomRank>;

/**
 * QualityRankModel
 * Ranking configuration for quality attributes.
 */
export const zQualityRankModel = z.object({
    av1: zCustomRank.optional(),
    avc: zCustomRank.optional(),
    bluray: zCustomRank.optional(),
    dvd: zCustomRank.optional(),
    hdtv: zCustomRank.optional(),
    hevc: zCustomRank.optional(),
    mpeg: zCustomRank.optional(),
    remux: zCustomRank.optional(),
    vhs: zCustomRank.optional(),
    web: zCustomRank.optional(),
    webdl: zCustomRank.optional(),
    webmux: zCustomRank.optional(),
    xvid: zCustomRank.optional()
}).describe('Ranking configuration for quality attributes.');

export type QualityRankModelZodType = z.infer<typeof zQualityRankModel>;

/**
 * RipsRankModel
 * Ranking configuration for rips attributes.
 */
export const zRipsRankModel = z.object({
    bdrip: zCustomRank.optional(),
    brrip: zCustomRank.optional(),
    dvdrip: zCustomRank.optional(),
    hdrip: zCustomRank.optional(),
    ppvrip: zCustomRank.optional(),
    satrip: zCustomRank.optional(),
    tvrip: zCustomRank.optional(),
    uhdrip: zCustomRank.optional(),
    vhsrip: zCustomRank.optional(),
    webdlrip: zCustomRank.optional(),
    webrip: zCustomRank.optional()
}).describe('Ranking configuration for rips attributes.');

export type RipsRankModelZodType = z.infer<typeof zRipsRankModel>;

/**
 * HdrRankModel
 * Ranking configuration for HDR attributes.
 */
export const zHdrRankModel = z.object({
    bit10: zCustomRank.optional(),
    dolby_vision: zCustomRank.optional(),
    hdr: zCustomRank.optional(),
    hdr10plus: zCustomRank.optional(),
    sdr: zCustomRank.optional()
}).describe('Ranking configuration for HDR attributes.');

export type HdrRankModelZodType = z.infer<typeof zHdrRankModel>;

/**
 * AudioRankModel
 * Ranking configuration for audio attributes.
 */
export const zAudioRankModel = z.object({
    aac: zCustomRank.optional(),
    atmos: zCustomRank.optional(),
    dolby_digital: zCustomRank.optional(),
    dolby_digital_plus: zCustomRank.optional(),
    dts_lossy: zCustomRank.optional(),
    dts_lossless: zCustomRank.optional(),
    flac: zCustomRank.optional(),
    mono: zCustomRank.optional(),
    mp3: zCustomRank.optional(),
    stereo: zCustomRank.optional(),
    surround: zCustomRank.optional(),
    truehd: zCustomRank.optional()
}).describe('Ranking configuration for audio attributes.');

export type AudioRankModelZodType = z.infer<typeof zAudioRankModel>;

/**
 * ExtrasRankModel
 * Ranking configuration for extras attributes.
 */
export const zExtrasRankModel = z.object({
    '3d': zCustomRank.optional(),
    converted: zCustomRank.optional(),
    documentary: zCustomRank.optional(),
    dubbed: zCustomRank.optional(),
    edition: zCustomRank.optional(),
    hardcoded: zCustomRank.optional(),
    network: zCustomRank.optional(),
    proper: zCustomRank.optional(),
    repack: zCustomRank.optional(),
    retail: zCustomRank.optional(),
    site: zCustomRank.optional(),
    subbed: zCustomRank.optional(),
    upscaled: zCustomRank.optional(),
    scene: zCustomRank.optional(),
    uncensored: zCustomRank.optional()
}).describe('Ranking configuration for extras attributes.');

export type ExtrasRankModelZodType = z.infer<typeof zExtrasRankModel>;

/**
 * TrashRankModel
 * Ranking configuration for trash attributes.
 */
export const zTrashRankModel = z.object({
    cam: zCustomRank.optional(),
    clean_audio: zCustomRank.optional(),
    pdtv: zCustomRank.optional(),
    r5: zCustomRank.optional(),
    screener: zCustomRank.optional(),
    size: zCustomRank.optional(),
    telecine: zCustomRank.optional(),
    telesync: zCustomRank.optional()
}).describe('Ranking configuration for trash attributes.');

export type TrashRankModelZodType = z.infer<typeof zTrashRankModel>;

/**
 * CustomRanksConfig
 * Configuration for custom ranks.
 */
export const zCustomRanksConfig = z.object({
    quality: zQualityRankModel.optional(),
    rips: zRipsRankModel.optional(),
    hdr: zHdrRankModel.optional(),
    audio: zAudioRankModel.optional(),
    extras: zExtrasRankModel.optional(),
    trash: zTrashRankModel.optional()
}).describe('Configuration for custom ranks.');

export type CustomRanksConfigZodType = z.infer<typeof zCustomRanksConfig>;

/**
 * RTNSettingsModel
 */
export const zRtnSettingsModel = z.object({
    profile: z.string().describe('Identifier for the settings profile').optional().default('default'),
    require: z.array(z.string()).describe('Patterns torrents must match to be considered').optional(),
    exclude: z.array(z.string()).describe('Patterns that, if matched, result in torrent exclusion').optional(),
    preferred: z.array(z.string()).describe('Patterns indicating preferred attributes in torrents').optional(),
    resolutions: zResolutionConfig.optional(),
    options: zOptionsConfig.optional(),
    languages: zLanguagesConfig.optional(),
    custom_ranks: zCustomRanksConfig.optional()
});

export type RtnSettingsModelZodType = z.infer<typeof zRtnSettingsModel>;

/**
 * IndexerModel
 */
export const zIndexerModel = z.object({
    reindex_ongoing_interval: z.number().int().gte(0).describe('Interval in seconds to reindex all ongoing items (24 hours default, 0 to disable)').optional().default(86400)
});

export type IndexerModelZodType = z.infer<typeof zIndexerModel>;

/**
 * DatabaseModel
 */
export const zDatabaseModel = z.object({
    host: z.string().min(1).describe('Database connection string').optional()
});

export type DatabaseModelZodType = z.infer<typeof zDatabaseModel>;

/**
 * NotificationsModel
 */
export const zNotificationsModel = z.object({
    enabled: z.boolean().describe('Enable notifications').optional().default(false),
    on_item_type: z.array(z.string()).describe('Item types to send notifications for').optional(),
    service_urls: z.array(z.string()).describe('Notification service URLs (e.g., Discord webhooks)').optional()
});

export type NotificationsModelZodType = z.infer<typeof zNotificationsModel>;

/**
 * SubtitleProviderConfig
 */
export const zSubtitleProviderConfig = z.object({
    enabled: z.boolean().describe('Enable this subtitle provider').optional().default(false)
});

export type SubtitleProviderConfigZodType = z.infer<typeof zSubtitleProviderConfig>;

/**
 * SubtitleProvidersDict
 */
export const zSubtitleProvidersDict = z.object({
    opensubtitles: zSubtitleProviderConfig.optional()
});

export type SubtitleProvidersDictZodType = z.infer<typeof zSubtitleProvidersDict>;

/**
 * SubtitleConfig
 */
export const zSubtitleConfig = z.object({
    enabled: z.boolean().describe('Enable subtitle downloading').optional().default(false),
    languages: z.array(z.string()).describe('Subtitle languages to download (ISO 639-2 codes)').optional(),
    providers: zSubtitleProvidersDict.optional()
});

export type SubtitleConfigZodType = z.infer<typeof zSubtitleConfig>;

/**
 * PostProcessing
 */
export const zPostProcessing = z.object({
    subtitle: zSubtitleConfig.optional()
});

export type PostProcessingZodType = z.infer<typeof zPostProcessing>;

/**
 * LoggingModel
 */
export const zLoggingModel = z.object({
    enabled: z.boolean().describe('Enable file logging').optional().default(true),
    clean_interval: z.number().int().describe('Log cleanup interval in seconds (1 hour default)').optional().default(3600),
    retention_hours: z.number().int().describe('Log retention period in hours').optional().default(24),
    rotation_mb: z.number().int().describe('Log file rotation size in MB').optional().default(10),
    compression: z.enum([
        'zip',
        'gz',
        'bz2',
        'xz',
        'disabled'
    ]).describe('Log compression format (empty for no compression)').optional()
});

export type LoggingModelZodType = z.infer<typeof zLoggingModel>;

/**
 * AppModel
 */
export const zAppModel = z.object({
    version: z.string().describe('Application version').optional(),
    api_key: z.string().describe('API key for Riven API access').optional().default(''),
    log_level: z.enum([
        'TRACE',
        'DEBUG',
        'INFO',
        'WARNING',
        'ERROR',
        'CRITICAL'
    ]).describe('Logging level').optional(),
    retry_interval: z.number().int().gte(0).describe('Interval in seconds to retry failed library items (24 hours default, 0 to disable)').optional().default(86400),
    tracemalloc: z.boolean().describe('Enable Python memory tracking (debug)').optional().default(false),
    filesystem: zFilesystemModel.optional(),
    updaters: zUpdatersModel.optional(),
    downloaders: zDownloadersModel.optional(),
    content: zContentModel.optional(),
    scraping: zScraperModel.optional(),
    ranking: zRtnSettingsModel.optional(),
    indexer: zIndexerModel.optional(),
    database: zDatabaseModel.optional(),
    notifications: zNotificationsModel.optional(),
    post_processing: zPostProcessing.optional(),
    logging: zLoggingModel.optional()
});

export type AppModelZodType = z.infer<typeof zAppModel>;

/**
 * CalendarResponse
 */
export const zCalendarResponse = z.object({
    data: z.record(z.unknown())
});

export type CalendarResponseZodType = z.infer<typeof zCalendarResponse>;

/**
 * DebridFile
 * Represents a file from a debrid service
 */
export const zDebridFile = z.object({
    file_id: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    filename: z.union([
        z.string(),
        z.null()
    ]).optional(),
    filesize: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    download_url: z.union([
        z.string(),
        z.null()
    ]).optional()
}).describe('Represents a file from a debrid service');

export type DebridFileZodType = z.infer<typeof zDebridFile>;

/**
 * Container
 * Root model for container mapping file IDs to file information.
 *
 * Example:
 * {
 * "4": {
 * "filename": "show.s01e01.mkv",
 * "filesize": 30791392598
 * },
 * "5": {
 * "filename": "show.s01e02.mkv",
 * "filesize": 25573181861
 * }
 * }
 */
export const zContainer = z.record(zDebridFile).describe('Root model for container mapping file IDs to file information.\n\nExample:\n{\n    "4": {\n        "filename": "show.s01e01.mkv",\n        "filesize": 30791392598\n    },\n    "5": {\n        "filename": "show.s01e02.mkv",\n        "filesize": 25573181861\n    }\n}');

export type ContainerZodType = z.infer<typeof zContainer>;

/**
 * DownloaderUserInfo
 * Normalized downloader user information response
 */
export const zDownloaderUserInfo = z.object({
    service: z.enum([
        'realdebrid',
        'torbox',
        'alldebrid'
    ]),
    username: z.union([
        z.string(),
        z.null()
    ]).optional(),
    email: z.union([
        z.string(),
        z.null()
    ]).optional(),
    user_id: z.union([
        z.number().int(),
        z.string()
    ]),
    premium_status: z.enum([
        'free',
        'premium'
    ]),
    premium_expires_at: z.union([
        z.string(),
        z.null()
    ]).optional(),
    premium_days_left: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    points: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    total_downloaded_bytes: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    cooldown_until: z.union([
        z.string(),
        z.null()
    ]).optional()
}).describe('Normalized downloader user information response');

export type DownloaderUserInfoZodType = z.infer<typeof zDownloaderUserInfo>;

/**
 * DownloaderUserInfoResponse
 * Response containing user info for all initialized downloader services
 */
export const zDownloaderUserInfoResponse = z.object({
    services: z.array(zDownloaderUserInfo)
}).describe('Response containing user info for all initialized downloader services');

export type DownloaderUserInfoResponseZodType = z.infer<typeof zDownloaderUserInfoResponse>;

/**
 * ValidationError
 */
export const zValidationError = z.object({
    loc: z.array(z.union([
        z.string(),
        z.number().int()
    ])),
    msg: z.string(),
    type: z.string()
});

export type ValidationErrorZodType = z.infer<typeof zValidationError>;

/**
 * HTTPValidationError
 */
export const zHttpValidationError = z.object({
    detail: z.array(zValidationError).optional()
});

export type HttpValidationErrorZodType = z.infer<typeof zHttpValidationError>;

/**
 * ItemsResponse
 */
export const zItemsResponse = z.object({
    success: z.boolean(),
    items: z.array(z.record(z.unknown())),
    page: z.number().int(),
    limit: z.number().int(),
    total_items: z.number().int(),
    total_pages: z.number().int()
});

export type ItemsResponseZodType = z.infer<typeof zItemsResponse>;

/**
 * LogsResponse
 */
export const zLogsResponse = z.object({
    logs: z.array(z.string())
});

export type LogsResponseZodType = z.infer<typeof zLogsResponse>;

/**
 * MessageResponse
 */
export const zMessageResponse = z.object({
    message: z.string(),
    tmdb_ids: z.array(z.string()).optional().default([]),
    tvdb_ids: z.array(z.string()).optional().default([])
});

export type MessageResponseZodType = z.infer<typeof zMessageResponse>;

/**
 * MountResponse
 */
export const zMountResponse = z.object({
    files: z.record(z.string())
});

export type MountResponseZodType = z.infer<typeof zMountResponse>;

/**
 * ParseTorrentTitleResponse
 */
export const zParseTorrentTitleResponse = z.object({
    message: z.string(),
    data: z.array(z.record(z.unknown()))
});

export type ParseTorrentTitleResponseZodType = z.infer<typeof zParseTorrentTitleResponse>;

/**
 * ParsedData
 * Parsed data model for a torrent title.
 */
export const zParsedData = z.object({
    raw_title: z.string(),
    parsed_title: z.string().optional().default(''),
    normalized_title: z.string().optional().default(''),
    trash: z.boolean().optional().default(false),
    adult: z.boolean().optional().default(false),
    year: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    resolution: z.string().optional().default('unknown'),
    seasons: z.array(z.number().int()).optional().default([]),
    episodes: z.array(z.number().int()).optional().default([]),
    complete: z.boolean().optional().default(false),
    volumes: z.array(z.number().int()).optional().default([]),
    languages: z.array(z.string()).optional().default([]),
    quality: z.union([
        z.string(),
        z.null()
    ]).optional(),
    hdr: z.array(z.string()).optional().default([]),
    codec: z.union([
        z.string(),
        z.null()
    ]).optional(),
    audio: z.array(z.string()).optional().default([]),
    channels: z.array(z.string()).optional().default([]),
    dubbed: z.boolean().optional().default(false),
    subbed: z.boolean().optional().default(false),
    date: z.union([
        z.string(),
        z.null()
    ]).optional(),
    group: z.union([
        z.string(),
        z.null()
    ]).optional(),
    edition: z.union([
        z.string(),
        z.null()
    ]).optional(),
    bit_depth: z.union([
        z.string(),
        z.null()
    ]).optional(),
    bitrate: z.union([
        z.string(),
        z.null()
    ]).optional(),
    network: z.union([
        z.string(),
        z.null()
    ]).optional(),
    extended: z.boolean().optional().default(false),
    converted: z.boolean().optional().default(false),
    hardcoded: z.boolean().optional().default(false),
    region: z.union([
        z.string(),
        z.null()
    ]).optional(),
    ppv: z.boolean().optional().default(false),
    site: z.union([
        z.string(),
        z.null()
    ]).optional(),
    size: z.union([
        z.string(),
        z.null()
    ]).optional(),
    proper: z.boolean().optional().default(false),
    repack: z.boolean().optional().default(false),
    retail: z.boolean().optional().default(false),
    upscaled: z.boolean().optional().default(false),
    remastered: z.boolean().optional().default(false),
    unrated: z.boolean().optional().default(false),
    uncensored: z.boolean().optional().default(false),
    documentary: z.boolean().optional().default(false),
    commentary: z.boolean().optional().default(false),
    episode_code: z.union([
        z.string(),
        z.null()
    ]).optional(),
    country: z.union([
        z.string(),
        z.null()
    ]).optional(),
    container: z.union([
        z.string(),
        z.null()
    ]).optional(),
    extension: z.union([
        z.string(),
        z.null()
    ]).optional(),
    extras: z.array(z.string()).optional().default([]),
    torrent: z.boolean().optional().default(false),
    scene: z.boolean().optional().default(false)
}).describe('Parsed data model for a torrent title.');

export type ParsedDataZodType = z.infer<typeof zParsedData>;

/**
 * PauseResponse
 */
export const zPauseResponse = z.object({
    message: z.string(),
    ids: z.array(z.number().int())
});

export type PauseResponseZodType = z.infer<typeof zPauseResponse>;

/**
 * ReindexResponse
 */
export const zReindexResponse = z.object({
    message: z.string()
});

export type ReindexResponseZodType = z.infer<typeof zReindexResponse>;

/**
 * RemoveResponse
 */
export const zRemoveResponse = z.object({
    message: z.string(),
    ids: z.array(z.number().int())
});

export type RemoveResponseZodType = z.infer<typeof zRemoveResponse>;

/**
 * ResetResponse
 */
export const zResetResponse = z.object({
    message: z.string(),
    ids: z.array(z.number().int())
});

export type ResetResponseZodType = z.infer<typeof zResetResponse>;

/**
 * RetryResponse
 */
export const zRetryResponse = z.object({
    message: z.string(),
    ids: z.array(z.number().int())
});

export type RetryResponseZodType = z.infer<typeof zRetryResponse>;

/**
 * RootResponse
 */
export const zRootResponse = z.object({
    message: z.string(),
    tmdb_ids: z.array(z.string()).optional().default([]),
    tvdb_ids: z.array(z.string()).optional().default([]),
    version: z.string()
});

export type RootResponseZodType = z.infer<typeof zRootResponse>;

/**
 * Stream
 */
export const zStream = z.object({
    infohash: z.string(),
    raw_title: z.string(),
    parsed_title: z.string(),
    parsed_data: zParsedData,
    rank: z.number().int(),
    lev_ratio: z.number(),
    is_cached: z.boolean().optional().default(false)
});

export type StreamZodType = z.infer<typeof zStream>;

/**
 * ScrapeItemResponse
 */
export const zScrapeItemResponse = z.object({
    message: z.string(),
    streams: z.record(zStream)
});

export type ScrapeItemResponseZodType = z.infer<typeof zScrapeItemResponse>;

/**
 * SelectFilesResponse
 */
export const zSelectFilesResponse = z.object({
    message: z.string(),
    download_type: z.enum([
        'cached',
        'uncached'
    ])
});

export type SelectFilesResponseZodType = z.infer<typeof zSelectFilesResponse>;

/**
 * SessionResponse
 */
export const zSessionResponse = z.object({
    message: z.string()
});

export type SessionResponseZodType = z.infer<typeof zSessionResponse>;

/**
 * SetSettings
 */
export const zSetSettings = z.object({
    key: z.string(),
    value: z.unknown()
});

export type SetSettingsZodType = z.infer<typeof zSetSettings>;

/**
 * ShowFileData
 * Root model for show file data that maps seasons to episodes to file data.
 *
 * Example:
 * {
 * 1: {  # Season 1
 * 1: {"filename": "path/to/s01e01.mkv"},  # Episode 1
 * 2: {"filename": "path/to/s01e02.mkv"}   # Episode 2
 * },
 * 2: {  # Season 2
 * 1: {"filename": "path/to/s02e01.mkv"}   # Episode 1
 * }
 * }
 */
export const zShowFileData = z.record(z.record(zDebridFile)).describe('Root model for show file data that maps seasons to episodes to file data.\n\nExample:\n{\n    1: {  # Season 1\n        1: {"filename": "path/to/s01e01.mkv"},  # Episode 1\n        2: {"filename": "path/to/s01e02.mkv"}   # Episode 2\n    },\n    2: {  # Season 2\n        1: {"filename": "path/to/s02e01.mkv"}   # Episode 1\n    }\n}');

export type ShowFileDataZodType = z.infer<typeof zShowFileData>;

/**
 * TorrentInfo
 * Torrent information from a debrid service
 */
export const zTorrentInfo = z.object({
    id: z.union([
        z.number().int(),
        z.string()
    ]),
    name: z.string(),
    status: z.union([
        z.string(),
        z.null()
    ]).optional(),
    infohash: z.union([
        z.string(),
        z.null()
    ]).optional(),
    progress: z.union([
        z.number(),
        z.null()
    ]).optional(),
    bytes: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    created_at: z.union([
        z.string().datetime(),
        z.null()
    ]).optional(),
    expires_at: z.union([
        z.string().datetime(),
        z.null()
    ]).optional(),
    completed_at: z.union([
        z.string().datetime(),
        z.null()
    ]).optional(),
    alternative_filename: z.union([
        z.string(),
        z.null()
    ]).optional(),
    files: z.record(z.record(z.union([
        z.number().int(),
        z.string()
    ]))).optional(),
    links: z.array(z.string()).optional()
}).describe('Torrent information from a debrid service');

export type TorrentInfoZodType = z.infer<typeof zTorrentInfo>;

/**
 * TorrentContainer
 * Represents a collection of files from an infohash from a debrid service
 */
export const zTorrentContainer = z.object({
    infohash: z.string(),
    files: z.array(zDebridFile).optional(),
    torrent_id: z.union([
        z.number().int(),
        z.string(),
        z.null()
    ]).optional(),
    torrent_info: z.union([
        zTorrentInfo,
        z.null()
    ]).optional()
}).describe('Represents a collection of files from an infohash from a debrid service');

export type TorrentContainerZodType = z.infer<typeof zTorrentContainer>;

/**
 * StartSessionResponse
 */
export const zStartSessionResponse = z.object({
    message: z.string(),
    session_id: z.string(),
    torrent_id: z.string(),
    torrent_info: zTorrentInfo,
    containers: z.union([
        zTorrentContainer,
        z.null()
    ]),
    expires_at: z.string()
});

export type StartSessionResponseZodType = z.infer<typeof zStartSessionResponse>;

/**
 * StateResponse
 */
export const zStateResponse = z.object({
    success: z.boolean(),
    states: z.array(z.string())
});

export type StateResponseZodType = z.infer<typeof zStateResponse>;

/**
 * States
 */
export const zStates = z.enum([
    'Unknown',
    'Unreleased',
    'Ongoing',
    'Requested',
    'Indexed',
    'Scraped',
    'Downloaded',
    'Symlinked',
    'Completed',
    'PartiallyCompleted',
    'Failed',
    'Paused'
]);

export type StatesZodType = z.infer<typeof zStates>;

/**
 * StatsResponse
 */
export const zStatsResponse = z.object({
    total_items: z.number().int(),
    total_movies: z.number().int(),
    total_shows: z.number().int(),
    total_seasons: z.number().int(),
    total_episodes: z.number().int(),
    total_symlinks: z.number().int(),
    incomplete_items: z.number().int(),
    incomplete_retries: z.record(z.number().int()).describe('Media item log string: number of retries'),
    states: z.record(z.number().int())
});

export type StatsResponseZodType = z.infer<typeof zStatsResponse>;

/**
 * TraktOAuthInitiateResponse
 */
export const zTraktOAuthInitiateResponse = z.object({
    auth_url: z.string()
});

export type TraktOAuthInitiateResponseZodType = z.infer<typeof zTraktOAuthInitiateResponse>;

/**
 * UpdateAttributesResponse
 */
export const zUpdateAttributesResponse = z.object({
    message: z.string()
});

export type UpdateAttributesResponseZodType = z.infer<typeof zUpdateAttributesResponse>;

/**
 * UpdateNewReleasesResponse
 */
export const zUpdateNewReleasesResponse = z.object({
    message: z.string(),
    updated_items: z.array(z.record(z.unknown()))
});

export type UpdateNewReleasesResponseZodType = z.infer<typeof zUpdateNewReleasesResponse>;

/**
 * UpdateOngoingResponse
 */
export const zUpdateOngoingResponse = z.object({
    message: z.string(),
    updated_items: z.array(z.record(z.unknown()))
});

export type UpdateOngoingResponseZodType = z.infer<typeof zUpdateOngoingResponse>;

/**
 * UploadLogsResponse
 */
export const zUploadLogsResponse = z.object({
    success: z.boolean(),
    url: z.string().url().min(1).max(2083).describe('URL to the uploaded log file. 50M Filesize limit. 180 day retention.')
});

export type UploadLogsResponseZodType = z.infer<typeof zUploadLogsResponse>;

/**
 * VFSStatsResponse
 */
export const zVfsStatsResponse = z.object({
    stats: z.record(z.record(z.unknown())).describe('VFS statistics')
});

export type VfsStatsResponseZodType = z.infer<typeof zVfsStatsResponse>;

/**
 * EventResponse
 */
export const zRoutersSecureDefaultEventResponse = z.object({
    events: z.record(z.array(z.number().int()))
});

export type RoutersSecureDefaultEventResponseZodType = z.infer<typeof zRoutersSecureDefaultEventResponse>;

/**
 * EventResponse
 */
export const zRoutersSecureStreamEventResponse = z.object({
    data: z.record(z.unknown())
});

export type RoutersSecureStreamEventResponseZodType = z.infer<typeof zRoutersSecureStreamEventResponse>;

export const zRootData = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.never().optional()
});

export type RootDataZodType = z.infer<typeof zRootData>;

/**
 * Successful Response
 */
export const zRootResponse2 = zRootResponse;

export type RootResponseZodType2 = z.infer<typeof zRootResponse2>;

export const zHealthData = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.never().optional()
});

export type HealthDataZodType = z.infer<typeof zHealthData>;

/**
 * Successful Response
 */
export const zHealthResponse = zMessageResponse;

export type HealthResponseZodType = z.infer<typeof zHealthResponse>;

export const zDownloadUserInfoData = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.never().optional()
});

export type DownloadUserInfoDataZodType = z.infer<typeof zDownloadUserInfoData>;

/**
 * Successful Response
 */
export const zDownloadUserInfoResponse = zDownloaderUserInfoResponse;

export type DownloadUserInfoResponseZodType = z.infer<typeof zDownloadUserInfoResponse>;

export const zGenerateapikeyData = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.never().optional()
});

export type GenerateapikeyDataZodType = z.infer<typeof zGenerateapikeyData>;

/**
 * Successful Response
 */
export const zGenerateapikeyResponse = zMessageResponse;

export type GenerateapikeyResponseZodType = z.infer<typeof zGenerateapikeyResponse>;

export const zServicesData = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.never().optional()
});

export type ServicesDataZodType = z.infer<typeof zServicesData>;

/**
 * Response Services
 * Successful Response
 */
export const zServicesResponse = z.record(z.boolean()).describe('Successful Response');

export type ServicesResponseZodType = z.infer<typeof zServicesResponse>;

export const zTraktOauthInitiateData = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.never().optional()
});

export type TraktOauthInitiateDataZodType = z.infer<typeof zTraktOauthInitiateData>;

/**
 * Successful Response
 */
export const zTraktOauthInitiateResponse = zTraktOAuthInitiateResponse;

export type TraktOauthInitiateResponseZodType = z.infer<typeof zTraktOauthInitiateResponse>;

export const zTraktOauthCallbackData = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.object({
        code: z.string()
    })
});

export type TraktOauthCallbackDataZodType = z.infer<typeof zTraktOauthCallbackData>;

/**
 * Successful Response
 */
export const zTraktOauthCallbackResponse = zMessageResponse;

export type TraktOauthCallbackResponseZodType = z.infer<typeof zTraktOauthCallbackResponse>;

export const zStatsData = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.never().optional()
});

export type StatsDataZodType = z.infer<typeof zStatsData>;

/**
 * Successful Response
 */
export const zStatsResponse2 = zStatsResponse;

export type StatsResponseZodType2 = z.infer<typeof zStatsResponse2>;

export const zLogsData = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.never().optional()
});

export type LogsDataZodType = z.infer<typeof zLogsData>;

/**
 * Successful Response
 */
export const zLogsResponse2 = zLogsResponse;

export type LogsResponseZodType2 = z.infer<typeof zLogsResponse2>;

export const zEventsData = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.never().optional()
});

export type EventsDataZodType = z.infer<typeof zEventsData>;

/**
 * Successful Response
 */
export const zEventsResponse = zRoutersSecureDefaultEventResponse;

export type EventsResponseZodType = z.infer<typeof zEventsResponse>;

export const zMountData = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.never().optional()
});

export type MountDataZodType = z.infer<typeof zMountData>;

/**
 * Successful Response
 */
export const zMountResponse2 = zMountResponse;

export type MountResponseZodType2 = z.infer<typeof zMountResponse2>;

export const zUploadLogsData = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.never().optional()
});

export type UploadLogsDataZodType = z.infer<typeof zUploadLogsData>;

/**
 * Successful Response
 */
export const zUploadLogsResponse2 = zUploadLogsResponse;

export type UploadLogsResponseZodType2 = z.infer<typeof zUploadLogsResponse2>;

export const zFetchCalendarData = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.never().optional()
});

export type FetchCalendarDataZodType = z.infer<typeof zFetchCalendarData>;

/**
 * Successful Response
 */
export const zFetchCalendarResponse = zCalendarResponse;

export type FetchCalendarResponseZodType = z.infer<typeof zFetchCalendarResponse>;

export const zGetVfsStatsData = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.never().optional()
});

export type GetVfsStatsDataZodType = z.infer<typeof zGetVfsStatsData>;

/**
 * Successful Response
 */
export const zGetVfsStatsResponse = zVfsStatsResponse;

export type GetVfsStatsResponseZodType = z.infer<typeof zGetVfsStatsResponse>;

export const zGetStatesData = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.never().optional()
});

export type GetStatesDataZodType = z.infer<typeof zGetStatesData>;

/**
 * Successful Response
 */
export const zGetStatesResponse = zStateResponse;

export type GetStatesResponseZodType = z.infer<typeof zGetStatesResponse>;

export const zGetItemsData = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.object({
        limit: z.union([
            z.number().int(),
            z.null()
        ]).optional(),
        page: z.union([
            z.number().int(),
            z.null()
        ]).optional(),
        type: z.union([
            z.string(),
            z.null()
        ]).optional(),
        states: z.union([
            z.string(),
            z.null()
        ]).optional(),
        sort: z.union([
            z.enum([
                'date_desc',
                'date_asc',
                'title_asc',
                'title_desc'
            ]),
            z.null()
        ]).optional(),
        search: z.union([
            z.string(),
            z.null()
        ]).optional(),
        extended: z.union([
            z.boolean(),
            z.null()
        ]).optional(),
        is_anime: z.union([
            z.boolean(),
            z.null()
        ]).optional()
    }).optional()
});

export type GetItemsDataZodType = z.infer<typeof zGetItemsData>;

/**
 * Successful Response
 */
export const zGetItemsResponse = zItemsResponse;

export type GetItemsResponseZodType = z.infer<typeof zGetItemsResponse>;

export const zAddItemsData = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.object({
        tmdb_ids: z.union([
            z.string(),
            z.null()
        ]).optional(),
        tvdb_ids: z.union([
            z.string(),
            z.null()
        ]).optional(),
        media_type: z.union([
            z.enum([
                'movie',
                'tv'
            ]),
            z.null()
        ]).optional()
    }).optional()
});

export type AddItemsDataZodType = z.infer<typeof zAddItemsData>;

/**
 * Successful Response
 */
export const zAddItemsResponse = zMessageResponse;

export type AddItemsResponseZodType = z.infer<typeof zAddItemsResponse>;

export const zGetItemData = z.object({
    body: z.never().optional(),
    path: z.object({
        id: z.string()
    }),
    query: z.object({
        media_type: z.enum([
            'movie',
            'tv',
            'item'
        ]).optional(),
        extended: z.union([
            z.boolean(),
            z.null()
        ]).optional()
    }).optional()
});

export type GetItemDataZodType = z.infer<typeof zGetItemData>;

/**
 * Response Get Item
 * Successful Response
 */
export const zGetItemResponse = z.record(z.unknown()).describe('Successful Response');

export type GetItemResponseZodType = z.infer<typeof zGetItemResponse>;

export const zResetItemsData = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.object({
        ids: z.string()
    })
});

export type ResetItemsDataZodType = z.infer<typeof zResetItemsData>;

/**
 * Successful Response
 */
export const zResetItemsResponse = zResetResponse;

export type ResetItemsResponseZodType = z.infer<typeof zResetItemsResponse>;

export const zRetryItemsData = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.object({
        ids: z.string()
    })
});

export type RetryItemsDataZodType = z.infer<typeof zRetryItemsData>;

/**
 * Successful Response
 */
export const zRetryItemsResponse = zRetryResponse;

export type RetryItemsResponseZodType = z.infer<typeof zRetryItemsResponse>;

export const zRetryLibraryItemsData = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.never().optional()
});

export type RetryLibraryItemsDataZodType = z.infer<typeof zRetryLibraryItemsData>;

/**
 * Successful Response
 */
export const zRetryLibraryItemsResponse = zRetryResponse;

export type RetryLibraryItemsResponseZodType = z.infer<typeof zRetryLibraryItemsResponse>;

export const zUpdateOngoingItemsData = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.never().optional()
});

export type UpdateOngoingItemsDataZodType = z.infer<typeof zUpdateOngoingItemsData>;

/**
 * Successful Response
 */
export const zUpdateOngoingItemsResponse = zUpdateOngoingResponse;

export type UpdateOngoingItemsResponseZodType = z.infer<typeof zUpdateOngoingItemsResponse>;

export const zUpdateNewReleasesItemsData = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.object({
        update_type: z.enum([
            'series',
            'seasons',
            'episodes'
        ]).optional(),
        hours: z.union([
            z.number().int(),
            z.null()
        ]).optional()
    }).optional()
});

export type UpdateNewReleasesItemsDataZodType = z.infer<typeof zUpdateNewReleasesItemsData>;

/**
 * Successful Response
 */
export const zUpdateNewReleasesItemsResponse = zUpdateNewReleasesResponse;

export type UpdateNewReleasesItemsResponseZodType = z.infer<typeof zUpdateNewReleasesItemsResponse>;

export const zRemoveItemData = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.object({
        ids: z.string()
    })
});

export type RemoveItemDataZodType = z.infer<typeof zRemoveItemData>;

/**
 * Successful Response
 */
export const zRemoveItemResponse = zRemoveResponse;

export type RemoveItemResponseZodType = z.infer<typeof zRemoveItemResponse>;

export const zGetItemStreamsApiV1ItemsItemIdStreamsGetData = z.object({
    body: z.never().optional(),
    path: z.object({
        item_id: z.number().int()
    }),
    query: z.never().optional()
});

export type GetItemStreamsApiV1ItemsItemIdStreamsGetDataZodType = z.infer<typeof zGetItemStreamsApiV1ItemsItemIdStreamsGetData>;

export const zBlacklistStreamApiV1ItemsItemIdStreamsStreamIdBlacklistPostData = z.object({
    body: z.never().optional(),
    path: z.object({
        item_id: z.number().int(),
        stream_id: z.number().int()
    }),
    query: z.never().optional()
});

export type BlacklistStreamApiV1ItemsItemIdStreamsStreamIdBlacklistPostDataZodType = z.infer<typeof zBlacklistStreamApiV1ItemsItemIdStreamsStreamIdBlacklistPostData>;

export const zUnblacklistStreamApiV1ItemsItemIdStreamsStreamIdUnblacklistPostData = z.object({
    body: z.never().optional(),
    path: z.object({
        item_id: z.number().int(),
        stream_id: z.number().int()
    }),
    query: z.never().optional()
});

export type UnblacklistStreamApiV1ItemsItemIdStreamsStreamIdUnblacklistPostDataZodType = z.infer<typeof zUnblacklistStreamApiV1ItemsItemIdStreamsStreamIdUnblacklistPostData>;

export const zResetItemStreamsData = z.object({
    body: z.never().optional(),
    path: z.object({
        item_id: z.number().int()
    }),
    query: z.never().optional()
});

export type ResetItemStreamsDataZodType = z.infer<typeof zResetItemStreamsData>;

export const zPauseItemsData = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.object({
        ids: z.string()
    })
});

export type PauseItemsDataZodType = z.infer<typeof zPauseItemsData>;

/**
 * Successful Response
 */
export const zPauseItemsResponse = zPauseResponse;

export type PauseItemsResponseZodType = z.infer<typeof zPauseItemsResponse>;

export const zUnpauseItemsData = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.object({
        ids: z.string()
    })
});

export type UnpauseItemsDataZodType = z.infer<typeof zUnpauseItemsData>;

/**
 * Successful Response
 */
export const zUnpauseItemsResponse = zPauseResponse;

export type UnpauseItemsResponseZodType = z.infer<typeof zUnpauseItemsResponse>;

export const zCompositeReindexerData = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.object({
        item_id: z.union([
            z.number().int(),
            z.null()
        ]).optional(),
        tvdb_id: z.union([
            z.string(),
            z.null()
        ]).optional(),
        tmdb_id: z.union([
            z.string(),
            z.null()
        ]).optional(),
        imdb_id: z.union([
            z.string(),
            z.null()
        ]).optional()
    }).optional()
});

export type CompositeReindexerDataZodType = z.infer<typeof zCompositeReindexerData>;

/**
 * Successful Response
 */
export const zCompositeReindexerResponse = zReindexResponse;

export type CompositeReindexerResponseZodType = z.infer<typeof zCompositeReindexerResponse>;

export const zScrapeItemData = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.object({
        item_id: z.union([
            z.string(),
            z.null()
        ]).optional(),
        tmdb_id: z.union([
            z.string(),
            z.null()
        ]).optional(),
        tvdb_id: z.union([
            z.string(),
            z.null()
        ]).optional(),
        imdb_id: z.union([
            z.string(),
            z.null()
        ]).optional(),
        media_type: z.union([
            z.enum([
                'movie',
                'tv'
            ]),
            z.null()
        ]).optional()
    }).optional()
});

export type ScrapeItemDataZodType = z.infer<typeof zScrapeItemData>;

/**
 * Successful Response
 */
export const zScrapeItemResponse2 = zScrapeItemResponse;

export type ScrapeItemResponseZodType2 = z.infer<typeof zScrapeItemResponse2>;

export const zStartManualSessionData = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.object({
        item_id: z.union([
            z.string(),
            z.null()
        ]).optional(),
        tmdb_id: z.union([
            z.string(),
            z.null()
        ]).optional(),
        tvdb_id: z.union([
            z.string(),
            z.null()
        ]).optional(),
        imdb_id: z.union([
            z.string(),
            z.null()
        ]).optional(),
        media_type: z.union([
            z.enum([
                'movie',
                'tv'
            ]),
            z.null()
        ]).optional(),
        magnet: z.union([
            z.string(),
            z.null()
        ]).optional()
    }).optional()
});

export type StartManualSessionDataZodType = z.infer<typeof zStartManualSessionData>;

/**
 * Successful Response
 */
export const zStartManualSessionResponse = zStartSessionResponse;

export type StartManualSessionResponseZodType = z.infer<typeof zStartManualSessionResponse>;

export const zManualSelectData = z.object({
    body: zContainer,
    path: z.object({
        session_id: z.string()
    }),
    query: z.never().optional()
});

export type ManualSelectDataZodType = z.infer<typeof zManualSelectData>;

/**
 * Successful Response
 */
export const zManualSelectResponse = zSelectFilesResponse;

export type ManualSelectResponseZodType = z.infer<typeof zManualSelectResponse>;

export const zManualUpdateAttributesData = z.object({
    body: z.union([
        zDebridFile,
        zShowFileData
    ]),
    path: z.object({
        session_id: z.unknown()
    }),
    query: z.never().optional()
});

export type ManualUpdateAttributesDataZodType = z.infer<typeof zManualUpdateAttributesData>;

/**
 * Successful Response
 */
export const zManualUpdateAttributesResponse = zUpdateAttributesResponse;

export type ManualUpdateAttributesResponseZodType = z.infer<typeof zManualUpdateAttributesResponse>;

export const zAbortManualSessionData = z.object({
    body: z.never().optional(),
    path: z.object({
        session_id: z.string()
    }),
    query: z.never().optional()
});

export type AbortManualSessionDataZodType = z.infer<typeof zAbortManualSessionData>;

/**
 * Successful Response
 */
export const zAbortManualSessionResponse = zSessionResponse;

export type AbortManualSessionResponseZodType = z.infer<typeof zAbortManualSessionResponse>;

export const zCompleteManualSessionData = z.object({
    body: z.never().optional(),
    path: z.object({
        session_id: z.string()
    }),
    query: z.never().optional()
});

export type CompleteManualSessionDataZodType = z.infer<typeof zCompleteManualSessionData>;

/**
 * Successful Response
 */
export const zCompleteManualSessionResponse = zSessionResponse;

export type CompleteManualSessionResponseZodType = z.infer<typeof zCompleteManualSessionResponse>;

export const zParseTorrentTitlesData = z.object({
    body: z.array(z.string()),
    path: z.never().optional(),
    query: z.never().optional()
});

export type ParseTorrentTitlesDataZodType = z.infer<typeof zParseTorrentTitlesData>;

/**
 * Successful Response
 */
export const zParseTorrentTitlesResponse = zParseTorrentTitleResponse;

export type ParseTorrentTitlesResponseZodType = z.infer<typeof zParseTorrentTitlesResponse>;

export const zGetSettingsSchemaData = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.never().optional()
});

export type GetSettingsSchemaDataZodType = z.infer<typeof zGetSettingsSchemaData>;

/**
 * Response Get Settings Schema
 * Successful Response
 */
export const zGetSettingsSchemaResponse = z.record(z.unknown()).describe('Successful Response');

export type GetSettingsSchemaResponseZodType = z.infer<typeof zGetSettingsSchemaResponse>;

export const zLoadSettingsData = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.never().optional()
});

export type LoadSettingsDataZodType = z.infer<typeof zLoadSettingsData>;

/**
 * Successful Response
 */
export const zLoadSettingsResponse = zMessageResponse;

export type LoadSettingsResponseZodType = z.infer<typeof zLoadSettingsResponse>;

export const zSaveSettingsData = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.never().optional()
});

export type SaveSettingsDataZodType = z.infer<typeof zSaveSettingsData>;

/**
 * Successful Response
 */
export const zSaveSettingsResponse = zMessageResponse;

export type SaveSettingsResponseZodType = z.infer<typeof zSaveSettingsResponse>;

export const zGetAllSettingsData = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.never().optional()
});

export type GetAllSettingsDataZodType = z.infer<typeof zGetAllSettingsData>;

/**
 * Successful Response
 */
export const zGetAllSettingsResponse = zAppModel;

export type GetAllSettingsResponseZodType = z.infer<typeof zGetAllSettingsResponse>;

export const zGetSettingsData = z.object({
    body: z.never().optional(),
    path: z.object({
        paths: z.string()
    }),
    query: z.never().optional()
});

export type GetSettingsDataZodType = z.infer<typeof zGetSettingsData>;

/**
 * Response Get Settings
 * Successful Response
 */
export const zGetSettingsResponse = z.record(z.unknown()).describe('Successful Response');

export type GetSettingsResponseZodType = z.infer<typeof zGetSettingsResponse>;

export const zSetAllSettingsData = z.object({
    body: z.record(z.unknown()),
    path: z.never().optional(),
    query: z.never().optional()
});

export type SetAllSettingsDataZodType = z.infer<typeof zSetAllSettingsData>;

/**
 * Successful Response
 */
export const zSetAllSettingsResponse = zMessageResponse;

export type SetAllSettingsResponseZodType = z.infer<typeof zSetAllSettingsResponse>;

export const zSetSettingsData = z.object({
    body: z.array(zSetSettings),
    path: z.never().optional(),
    query: z.never().optional()
});

export type SetSettingsDataZodType = z.infer<typeof zSetSettingsData>;

/**
 * Successful Response
 */
export const zSetSettingsResponse = zMessageResponse;

export type SetSettingsResponseZodType = z.infer<typeof zSetSettingsResponse>;

export const zOverseerrApiV1WebhookOverseerrPostData = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.never().optional()
});

export type OverseerrApiV1WebhookOverseerrPostDataZodType = z.infer<typeof zOverseerrApiV1WebhookOverseerrPostData>;

/**
 * Response Overseerr Api V1 Webhook Overseerr Post
 * Successful Response
 */
export const zOverseerrApiV1WebhookOverseerrPostResponse = z.record(z.unknown()).describe('Successful Response');

export type OverseerrApiV1WebhookOverseerrPostResponseZodType = z.infer<typeof zOverseerrApiV1WebhookOverseerrPostResponse>;

export const zGetEventTypesApiV1StreamEventTypesGetData = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.never().optional()
});

export type GetEventTypesApiV1StreamEventTypesGetDataZodType = z.infer<typeof zGetEventTypesApiV1StreamEventTypesGetData>;

export const zStreamEventsApiV1StreamEventTypeGetData = z.object({
    body: z.never().optional(),
    path: z.object({
        event_type: z.string()
    }),
    query: z.never().optional()
});

export type StreamEventsApiV1StreamEventTypeGetDataZodType = z.infer<typeof zStreamEventsApiV1StreamEventTypeGetData>;

/**
 * Successful Response
 */
export const zStreamEventsApiV1StreamEventTypeGetResponse = zRoutersSecureStreamEventResponse;

export type StreamEventsApiV1StreamEventTypeGetResponseZodType = z.infer<typeof zStreamEventsApiV1StreamEventTypeGetResponse>;